
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    AccountInfo
    Retrieves information about the user's account.
*/


var AccountInfo = function(session) {
    /*
        Create a new instance of the AccountInfo Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/Account/AccountInfo"
    AccountInfo.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new AccountInfoResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new AccountInfoInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the AccountInfo
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var AccountInfoInputSet = function() {
    AccountInfoInputSet.super_.call(this);
        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) The Access Token Secret retrieved during the OAuth process.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The Access Token retrieved during the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox (AKA the OAuth Consumer Key).)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox (AKA the OAuth Consumer Secret).)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the AccountInfo Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var AccountInfoResultSet = function(resultStream) {
    AccountInfoResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Dropbox. Corresponds to the ResponseFormat input. Defaults to json.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Information about the user's account.
    */
    this.getAccountInfo = function()  {
    	return new  DropboxAccountInfo(JSON.parse(this.getResult('Response')));
    }
}

util.inherits(AccountInfo, choreography.Choreography);
util.inherits(AccountInfoInputSet, choreography.InputSet);
util.inherits(AccountInfoResultSet, choreography.ResultSet);
exports.AccountInfo = AccountInfo;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}



/*
 Information about the user's account.
 
*/

var DropboxAccountInfo = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The user's two-letter country code, if available.
	*/
	this.getCountry = function()  {
		return base["country"];
	}

	/*
	The user's display name.
	*/
	this.getDisplayName = function()  {
		return base["display_name"];
	}

	/*
	The user's e-mail address.
	*/
	this.getEmail = function()  {
		return base["email"];
	}

	/*
	User's quota info for shared/unshared folders
	*/
	this.getQuotaInfo = function()  {
		return new  DropboxQuotaInfo(base["quota_info"]);
	}

	/*
	The user's referral link.
	*/
	this.getReferralLink = function()  {
		return base["referral_link"];
	}

	/*
	The user's unique Dropbox ID.
	*/
	this.getUid = function()  {
		return base["uid"];
	}
}


/*
 A copy reference to the specified file. For compatibility reasons, it returns the link's expiration date in Dropbox's usual date format. All links are currently set to expire far enough in the future so that expiration is effectively not an issue.
 
*/

var DropboxCopyRef = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	a reference to the copy
	*/
	this.getCopyRef = function()  {
		return base["copy_ref"];
	}

	/*
	timestamp when this reference expires
	*/
	this.getExpires = function()  {
		return base["expires"];
	}
}


/*
 A list of metdata for the folder's contents
 
*/

var DropboxFolderContentsList = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	A human-readable description of the file size (translated by locale).
	*/
	this.getBytes = function()  {
		return base["bytes"];
	}

	/*
	a list of metadata for the folder's contents
	*/
	this.getItemMetadata = function()  {
		var listEntries = base["contents"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  DropboxItemMetadata(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	A folder's hash is useful for indicating changes to the folder's contents in later calls to /metadata. This is roughly the folder equivalent to a file's rev.
	*/
	this.getHash = function()  {
		return base["hash"];
	}

	/*
	The name of the icon used to illustrate the file type in Dropbox's icon library.
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	Whether the given entry is a folder or not.
	*/
	this.getIsDir = function()  {
		return base["is_dir"];
	}

	/*
	Returns the canonical path to the file or directory.
	*/
	this.getPath = function()  {
		return base["path"];
	}

	/*
	The root or top-level folder depending on your access level. All paths returned are relative to this root level. Permitted values are either dropbox or app_folder.
	*/
	this.getRoot = function()  {
		return base["root"];
	}

	/*
	A human-readable description of the file size (translated by locale).
	*/
	this.getSize = function()  {
		return base["size"];
	}

	/*
	True if the file is an image can be converted to a thumbnail via the /thumbnails call.
	*/
	this.getThumbExists = function()  {
		return base["thumb_exists"];
	}
}


/*
 The metadata for the file or folder at the given <path>. If <path> represents a folder and the list parameter is true, the metadata will also include a listing of metadata for the folder's contents.
 
*/

var DropboxItemMetadata = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The file size in bytes.
	*/
	this.getBytes = function()  {
		return base["bytes"];
	}

	/*
	For files, this is the modification time set by the desktop client when the file was added to Dropbox, in the standard date format. Since this time is not verified (the Dropbox server stores whatever the desktop client sends up), this should only be used for display purposes (such as sorting) and not, for example, to determine if a file has changed or not.
	*/
	this.getClientMtime = function()  {
		return base["client_mtime"];
	}

	/*
	The name of the icon used to illustrate the file type in Dropbox's icon library.
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	Whether the given entry is deleted (only included if deleted files are being returned).
	*/
	this.getIsDeleted = function()  {
		return base["is_deleted"];
	}

	/*
	Whether the given entry is a folder or not.
	*/
	this.getIsDir = function()  {
		return base["is_dir"];
	}

	/*
	The mime type of the file.
	*/
	this.getMimeType = function()  {
		return base["mime_type"];
	}

	/*
	The last time the file was modified on Dropbox, in the standard date format (not included for the root folder).
	*/
	this.getModified = function()  {
		return base["modified"];
	}

	/*
	Returns the canonical path to the file or directory.
	*/
	this.getPath = function()  {
		return base["path"];
	}

	/*
	A unique identifier for the current revision of a file. This field is the same rev as elsewhere in the API and can be used to detect changes and avoid conflicts.
	*/
	this.getRev = function()  {
		return base["rev"];
	}

	/*
	A deprecated field that semi-uniquely identifies a file. Use rev instead.
	*/
	this.getRevision = function()  {
		return base["revision"];
	}

	/*
	The root or top-level folder depending on your access level. All paths returned are relative to this root level. Permitted values are either dropbox or app_folder.
	*/
	this.getRoot = function()  {
		return base["root"];
	}

	/*
	A human-readable description of the file size (translated by locale).
	*/
	this.getSize = function()  {
		return base["size"];
	}

	/*
	True if the file is an image can be converted to a thumbnail via the /thumbnails call.
	*/
	this.getThumbExists = function()  {
		return base["thumb_exists"];
	}
}


/*
 The user's quota info for shared/unshared folders
   
*/

var DropboxQuotaInfo = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The user's used quota outside of shared folders (bytes).
	*/
	this.getNormal = function()  {
		return base["normal"];
	}

	/*
	The user's used quota in shared folders (bytes).
	*/
	this.getQuota = function()  {
		return base["quota"];
	}

	/*
	The user's total quota allocation (bytes).
	*/
	this.getShared = function()  {
		return base["shared"];
	}
}


/*
 A Dropbox link to the given path. The link can be used publicly and directs to a preview page of the file. For compatibility reasons, it returns the link's expiration date in Dropbox's usual date format. All links are currently set to expire far enough in the future so that expiration is effectively not an issue.
 
*/

var DropboxShareableLink = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	timestamp of when this link expires
	*/
	this.getExpires = function()  {
		return base["expires"];
	}

	/*
	the url to the link
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


