
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    AddComment
    Adds a comment to a specified check-in.
*/


var AddComment = function(session) {
    /*
        Create a new instance of the AddComment Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Foursquare/Checkins/AddComment"
    AddComment.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new AddCommentResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new AddCommentInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the AddComment
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var AddCommentInputSet = function() {
    AddCommentInputSet.super_.call(this);
        /*
        Set the value of the CheckinID input for this Choreo. ((required, string) The ID of the check-in that you want to create a comment for.)
        */
        this.set_CheckinID = function(value) {
            this.setInput("CheckinID", value);
        }

        /*
        Set the value of the OauthToken input for this Choreo. ((required, string) The FourSquare API Oauth token string.)
        */
        this.set_OauthToken = function(value) {
            this.setInput("OauthToken", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Text input for this Choreo. ((required, string) The text of the comment, up to 200 characters.)
        */
        this.set_Text = function(value) {
            this.setInput("Text", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the AddComment Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var AddCommentResultSet = function(resultStream) {
    AddCommentResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Foursquare. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the response status code
    */
    this.getMeta = function()  {
    	return new  FoursquareMeta(JSON.parse(this.getResult('Response'))["meta"]);
    }
    /*
    Get the count of unread notifications for the authenticated user
    */
    this.getNotifications = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["notifications"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FoursquareNotification(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
    /*
    Get the information about the comment created
    */
    this.getComment = function()  {
    	return new  FoursquareComment(getSubArrayByKey(JSON.parse(this.getResult('Response')), "response")["comment"]);
    }
}

util.inherits(AddComment, choreography.Choreography);
util.inherits(AddCommentInputSet, choreography.InputSet);
util.inherits(AddCommentResultSet, choreography.ResultSet);
exports.AddComment = AddComment;


/*
    AddPost
    Posts user-generated content from an external app to a Foursquare check-in.
*/


var AddPost = function(session) {
    /*
        Create a new instance of the AddPost Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Foursquare/Checkins/AddPost"
    AddPost.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new AddPostResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new AddPostInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the AddPost
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var AddPostInputSet = function() {
    AddPostInputSet.super_.call(this);
        /*
        Set the value of the CheckinID input for this Choreo. ((required, string) The ID of the check-in to add a post to.)
        */
        this.set_CheckinID = function(value) {
            this.setInput("CheckinID", value);
        }

        /*
        Set the value of the ContentID input for this Choreo. ((optional, string) An ID for the post to be used in a native link. Can be up to 50 characters. The URL input must also be specified when using this parameter.)
        */
        this.set_ContentID = function(value) {
            this.setInput("ContentID", value);
        }

        /*
        Set the value of the OauthToken input for this Choreo. ((required, string) The FourSquare API Oauth token string.)
        */
        this.set_OauthToken = function(value) {
            this.setInput("OauthToken", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Text input for this Choreo. ((required, string) The text of the post. Max length is 200 characters.)
        */
        this.set_Text = function(value) {
            this.setInput("Text", value);
        }

        /*
        Set the value of the URL input for this Choreo. ((optional, string) A URL linking to more details. The following URL schemes are supported: http, https, foursquare, mailto, tel, and sms.)
        */
        this.set_URL = function(value) {
            this.setInput("URL", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the AddPost Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var AddPostResultSet = function(resultStream) {
    AddPostResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Foursquare. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the response status code
    */
    this.getMeta = function()  {
    	return new  FoursquareMeta(JSON.parse(this.getResult('Response'))["meta"]);
    }
    /*
    Get the count of unread notifications for the authenticated user
    */
    this.getNotifications = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["notifications"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FoursquareNotification(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
    /*
    Get information for the post that was created
    */
    this.getPost = function()  {
    	return new  FoursquarePost(getSubArrayByKey(JSON.parse(this.getResult('Response')), "response")["post"]);
    }
}

util.inherits(AddPost, choreography.Choreography);
util.inherits(AddPostInputSet, choreography.InputSet);
util.inherits(AddPostResultSet, choreography.ResultSet);
exports.AddPost = AddPost;


/*
    CheckinDetails
    Returns details of a check-in.
*/


var CheckinDetails = function(session) {
    /*
        Create a new instance of the CheckinDetails Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Foursquare/Checkins/CheckinDetails"
    CheckinDetails.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CheckinDetailsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CheckinDetailsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CheckinDetails
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CheckinDetailsInputSet = function() {
    CheckinDetailsInputSet.super_.call(this);
        /*
        Set the value of the CheckinID input for this Choreo. ((required, string) The ID of the check-in to retrieve additional information for.)
        */
        this.set_CheckinID = function(value) {
            this.setInput("CheckinID", value);
        }

        /*
        Set the value of the OauthToken input for this Choreo. ((required, string) The FourSquare API Oauth token string.)
        */
        this.set_OauthToken = function(value) {
            this.setInput("OauthToken", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Signature input for this Choreo. ((optional, string) When check-ins are sent to public feeds such as Twitter, foursquare appends a signature to them (s=XXXXXX). The same value can be used here.)
        */
        this.set_Signature = function(value) {
            this.setInput("Signature", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CheckinDetails Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CheckinDetailsResultSet = function(resultStream) {
    CheckinDetailsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Foursquare. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the response status code
    */
    this.getMeta = function()  {
    	return new  FoursquareMeta(JSON.parse(this.getResult('Response'))["meta"]);
    }
    /*
    Get the count of unread notifications for the authenticated user
    */
    this.getNotifications = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["notifications"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FoursquareNotification(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
    /*
    Get information about this checkin
    */
    this.getCheckin = function()  {
    	return new  FoursquareCheckin(getSubArrayByKey(JSON.parse(this.getResult('Response')), "response")["checkin"]);
    }
}

util.inherits(CheckinDetails, choreography.Choreography);
util.inherits(CheckinDetailsInputSet, choreography.InputSet);
util.inherits(CheckinDetailsResultSet, choreography.ResultSet);
exports.CheckinDetails = CheckinDetails;


/*
    CreateCheckin
    Allows you to create a check-in with Foursquare.
*/


var CreateCheckin = function(session) {
    /*
        Create a new instance of the CreateCheckin Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Foursquare/Checkins/CreateCheckin"
    CreateCheckin.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateCheckinResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateCheckinInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateCheckin
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateCheckinInputSet = function() {
    CreateCheckinInputSet.super_.call(this);
        /*
        Set the value of the AccuracyOfCoordinates input for this Choreo. ((optional, integer) Accuracy of the user's latitude and longitude, in meters.)
        */
        this.set_AccuracyOfCoordinates = function(value) {
            this.setInput("AccuracyOfCoordinates", value);
        }

        /*
        Set the value of the AltitudeAccuracy input for this Choreo. ((optional, integer) Vertical accuracy of the user's location, in meters.)
        */
        this.set_AltitudeAccuracy = function(value) {
            this.setInput("AltitudeAccuracy", value);
        }

        /*
        Set the value of the Altitude input for this Choreo. ((optional, integer) Altitude of the user's location, in meters.)
        */
        this.set_Altitude = function(value) {
            this.setInput("Altitude", value);
        }

        /*
        Set the value of the Broadcast input for this Choreo. ((optional, string) Who to broadcast this check-in to. Can be a comma-delimited list: private, public, facebook, twitter, or followers. Defaults to 'public'.)
        */
        this.set_Broadcast = function(value) {
            this.setInput("Broadcast", value);
        }

        /*
        Set the value of the EventID input for this Choreo. ((optional, string) The event the user is checking in to. A venueId for a venue with this eventId must also be specified in the request.)
        */
        this.set_EventID = function(value) {
            this.setInput("EventID", value);
        }

        /*
        Set the value of the Latitude input for this Choreo. ((optional, decimal) The latitude point of the user's location.)
        */
        this.set_Latitude = function(value) {
            this.setInput("Latitude", value);
        }

        /*
        Set the value of the Longitude input for this Choreo. ((optional, decimal) The longitude point of the user's location.)
        */
        this.set_Longitude = function(value) {
            this.setInput("Longitude", value);
        }

        /*
        Set the value of the OauthToken input for this Choreo. ((required, string) The FourSquare API Oauth token string.)
        */
        this.set_OauthToken = function(value) {
            this.setInput("OauthToken", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Shout input for this Choreo. ((optional, string) A message about your check-in. The maximum length of this field is 140 characters.)
        */
        this.set_Shout = function(value) {
            this.setInput("Shout", value);
        }

        /*
        Set the value of the VenueID input for this Choreo. ((required, string) The venue where the user is checking in. No venueid is needed if shouting or just providing a venue name.)
        */
        this.set_VenueID = function(value) {
            this.setInput("VenueID", value);
        }

        /*
        Set the value of the Venue input for this Choreo. ((optional, string) If you are not shouting, but you don't have a venue ID or prefer a 'venueless' checkin, pass the venue name as a string using this parameter.)
        */
        this.set_Venue = function(value) {
            this.setInput("Venue", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateCheckin Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateCheckinResultSet = function(resultStream) {
    CreateCheckinResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Foursquare. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the response status code
    */
    this.getMeta = function()  {
    	return new  FoursquareMeta(JSON.parse(this.getResult('Response'))["meta"]);
    }
    this.getNotifications = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["notifications"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FoursquareNotification(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
    /*
    Get the checkin object
    */
    this.getCheckin = function()  {
    	return new  FoursquareCheckin(getSubArrayByKey(JSON.parse(this.getResult('Response')), "response")["checkin"]);
    }
}

util.inherits(CreateCheckin, choreography.Choreography);
util.inherits(CreateCheckinInputSet, choreography.InputSet);
util.inherits(CreateCheckinResultSet, choreography.ResultSet);
exports.CreateCheckin = CreateCheckin;


/*
    DeleteComment
    Removes a comment to a specified check-in.
*/


var DeleteComment = function(session) {
    /*
        Create a new instance of the DeleteComment Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Foursquare/Checkins/DeleteComment"
    DeleteComment.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteCommentResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteCommentInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteComment
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteCommentInputSet = function() {
    DeleteCommentInputSet.super_.call(this);
        /*
        Set the value of the CheckinID input for this Choreo. ((required, string) The ID of the check-in associated with the comment you want to remove.)
        */
        this.set_CheckinID = function(value) {
            this.setInput("CheckinID", value);
        }

        /*
        Set the value of the CommentID input for this Choreo. ((required, string) The id of the comment to remove.)
        */
        this.set_CommentID = function(value) {
            this.setInput("CommentID", value);
        }

        /*
        Set the value of the OauthToken input for this Choreo. ((required, string) The FourSquare API Oauth token string.)
        */
        this.set_OauthToken = function(value) {
            this.setInput("OauthToken", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteComment Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteCommentResultSet = function(resultStream) {
    DeleteCommentResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Foursquare. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the response status code
    */
    this.getMeta = function()  {
    	return new  FoursquareMeta(JSON.parse(this.getResult('Response'))["meta"]);
    }
    /*
    Get the count of unread notifications for the authenticated user
    */
    this.getNotifications = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["notifications"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FoursquareNotification(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
    /*
    Get the checkin associated with the deleted comment
    */
    this.getCheckin = function()  {
    	return new  FoursquareCheckin(getSubArrayByKey(JSON.parse(this.getResult('Response')), "response")["checkin"]);
    }
}

util.inherits(DeleteComment, choreography.Choreography);
util.inherits(DeleteCommentInputSet, choreography.InputSet);
util.inherits(DeleteCommentResultSet, choreography.ResultSet);
exports.DeleteComment = DeleteComment;


/*
    Like
    Allows the authenticated user to like or unlike a check-in.
*/


var Like = function(session) {
    /*
        Create a new instance of the Like Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Foursquare/Checkins/Like"
    Like.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new LikeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new LikeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Like
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var LikeInputSet = function() {
    LikeInputSet.super_.call(this);
        /*
        Set the value of the CheckinID input for this Choreo. ((required, string) The ID of the check-in to like or unlike.)
        */
        this.set_CheckinID = function(value) {
            this.setInput("CheckinID", value);
        }

        /*
        Set the value of the OauthToken input for this Choreo. ((required, string) The FourSquare API Oauth token string.)
        */
        this.set_OauthToken = function(value) {
            this.setInput("OauthToken", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Set input for this Choreo. ((optional, boolean) Set to 1 (the default) to like this check-in. Set to 0 to undo a previous like.)
        */
        this.set_Set = function(value) {
            this.setInput("Set", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Like Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var LikeResultSet = function(resultStream) {
    LikeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Foursquare. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the response status code
    */
    this.getMeta = function()  {
    	return new  FoursquareMeta(JSON.parse(this.getResult('Response'))["meta"]);
    }
    /*
    Get the count of unread notifications for the authenticated user
    */
    this.getNotifications = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["notifications"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FoursquareNotification(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
    /*
    Get likes for this checkin
    */
    this.getLikes = function()  {
    	return new  FoursquareLikes(getSubArrayByKey(JSON.parse(this.getResult('Response')), "response")["likes"]);
    }
}

util.inherits(Like, choreography.Choreography);
util.inherits(LikeInputSet, choreography.InputSet);
util.inherits(LikeResultSet, choreography.ResultSet);
exports.Like = Like;


/*
    Likes
    Returns friends and a total count of users who have liked a check-in.
*/


var Likes = function(session) {
    /*
        Create a new instance of the Likes Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Foursquare/Checkins/Likes"
    Likes.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new LikesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new LikesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Likes
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var LikesInputSet = function() {
    LikesInputSet.super_.call(this);
        /*
        Set the value of the CheckinID input for this Choreo. ((required, string) The ID of the check-in to retrieve likes for.)
        */
        this.set_CheckinID = function(value) {
            this.setInput("CheckinID", value);
        }

        /*
        Set the value of the ClientID input for this Choreo. ((conditional, string) Your Foursquare client ID, obtained after registering at Foursquare. Required unless using the OauthToken input.)
        */
        this.set_ClientID = function(value) {
            this.setInput("ClientID", value);
        }

        /*
        Set the value of the ClientSecret input for this Choreo. ((conditional, string) Your Foursquare client secret, obtained after registering at Foursquare. Required unless using the OauthToken input.)
        */
        this.set_ClientSecret = function(value) {
            this.setInput("ClientSecret", value);
        }

        /*
        Set the value of the OauthToken input for this Choreo. ((required, string) The Foursquare API Oauth token string. Required unless specifying the ClientID and ClientSecret.)
        */
        this.set_OauthToken = function(value) {
            this.setInput("OauthToken", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Likes Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var LikesResultSet = function(resultStream) {
    LikesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Foursquare. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the response status code
    */
    this.getMeta = function()  {
    	return new  FoursquareMeta(JSON.parse(this.getResult('Response'))["meta"]);
    }
    /*
    Get likes for the checkin
    */
    this.getLikes = function()  {
    	return new  FoursquareLikes(getSubArrayByKey(JSON.parse(this.getResult('Response')), "response")["likes"]);
    }
}

util.inherits(Likes, choreography.Choreography);
util.inherits(LikesInputSet, choreography.InputSet);
util.inherits(LikesResultSet, choreography.ResultSet);
exports.Likes = Likes;


/*
    RecentCheckins
    Returns a list of recent friends' check-ins.
*/


var RecentCheckins = function(session) {
    /*
        Create a new instance of the RecentCheckins Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Foursquare/Checkins/RecentCheckins"
    RecentCheckins.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RecentCheckinsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RecentCheckinsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RecentCheckins
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RecentCheckinsInputSet = function() {
    RecentCheckinsInputSet.super_.call(this);
        /*
        Set the value of the AfterTimeStamp input for this Choreo. ((optional, integer) Seconds after which to look for check-ins, e.g. for looking for new check-ins since the last fetch.)
        */
        this.set_AfterTimeStamp = function(value) {
            this.setInput("AfterTimeStamp", value);
        }

        /*
        Set the value of the Latitude input for this Choreo. ((optional, decimal) The latitude point of the user's location.)
        */
        this.set_Latitude = function(value) {
            this.setInput("Latitude", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Number of results to return, up to 100.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Longitude input for this Choreo. ((optional, decimal) The longitude point of the user's location.)
        */
        this.set_Longitude = function(value) {
            this.setInput("Longitude", value);
        }

        /*
        Set the value of the OauthToken input for this Choreo. ((required, string) The FourSquare API Oauth token string.)
        */
        this.set_OauthToken = function(value) {
            this.setInput("OauthToken", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RecentCheckins Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RecentCheckinsResultSet = function(resultStream) {
    RecentCheckinsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Foursquare. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the response status code
    */
    this.getMeta = function()  {
    	return new  FoursquareMeta(JSON.parse(this.getResult('Response'))["meta"]);
    }
    /*
    Get the count of unread notifications for the authenticated user
    */
    this.getNotifications = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["notifications"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FoursquareNotification(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
    /*
    Get recent checkins
    */
    this.getRecent = function()  {
    	var listEntries = getSubArrayByKey(JSON.parse(this.getResult('Response')), "response")["recent"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FoursquareRecent(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(RecentCheckins, choreography.Choreography);
util.inherits(RecentCheckinsInputSet, choreography.InputSet);
util.inherits(RecentCheckinsResultSet, choreography.ResultSet);
exports.RecentCheckins = RecentCheckins;


/*
    Reply
    Replies to a user about their check-in.
*/


var Reply = function(session) {
    /*
        Create a new instance of the Reply Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Foursquare/Checkins/Reply"
    Reply.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ReplyResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ReplyInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Reply
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ReplyInputSet = function() {
    ReplyInputSet.super_.call(this);
        /*
        Set the value of the CheckinID input for this Choreo. ((required, string) The ID of the check-in to add a post to.)
        */
        this.set_CheckinID = function(value) {
            this.setInput("CheckinID", value);
        }

        /*
        Set the value of the ContentID input for this Choreo. ((optional, string) An ID for the reply to be used in a native link. Can be up to 50 characters. The URL input must also be specified when using this parameter.)
        */
        this.set_ContentID = function(value) {
            this.setInput("ContentID", value);
        }

        /*
        Set the value of the OauthToken input for this Choreo. ((required, string) The FourSquare API Oauth token string.)
        */
        this.set_OauthToken = function(value) {
            this.setInput("OauthToken", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Text input for this Choreo. ((required, string) The text of the post. Max length is 200 characters.)
        */
        this.set_Text = function(value) {
            this.setInput("Text", value);
        }

        /*
        Set the value of the URL input for this Choreo. ((optional, string) A URL linking to more details. The following URL schemes are supported: http, https, foursquare, mailto, tel, and sms.)
        */
        this.set_URL = function(value) {
            this.setInput("URL", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Reply Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ReplyResultSet = function(resultStream) {
    ReplyResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Foursquare. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the response status code
    */
    this.getMeta = function()  {
    	return new  FoursquareMeta(JSON.parse(this.getResult('Response'))["meta"]);
    }
    /*
    Get the count of unread notifications for the authenticated user
    */
    this.getNotifications = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["notifications"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FoursquareNotification(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
    /*
    Get the reply to a checkin
    */
    this.getReply = function()  {
    	return new  FoursquareReply(getSubArrayByKey(JSON.parse(this.getResult('Response')), "response")["reply"]);
    }
}

util.inherits(Reply, choreography.Choreography);
util.inherits(ReplyInputSet, choreography.InputSet);
util.inherits(ReplyResultSet, choreography.ResultSet);
exports.Reply = Reply;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}



/*
 Contains badges associated with the checkin
 
*/

var FoursquareBadge = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	A canonical ID for this badge
	*/
	this.getBadgeId = function()  {
		return base["badgeId"];
	}

	/*
	The badge description
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	A unique identifier for this badge
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get the badge image information
	*/
	this.getBadgeImage = function()  {
		return new  FoursquareBadgeImage(base["image"]);
	}

	/*
	The name of the badge
	*/
	this.getName = function()  {
		return base["name"];
	}
}


/*
 Contains the image information for badges
     
*/

var FoursquareBadgeImage = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	*/
	this.getPrefix = function()  {
		return base["prefix"];
	}

	/*
	*/
	this.getSizes = function()  {
		var listEntries = base["sizes"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = listEntries[i];
			}
		}
		return resultArray;
	}
}


/*
 Contains the count of the number of times the acting user has been here. Absent if there is no acting user 
*/

var FoursquareBeenHere = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The number of times the acting user has been at the venue
	*/
	this.getCount = function()  {
		return base["count"];
	}
}


/*
  Contains information about the categories that have been applied to this foursquare object
 
*/

var FoursquareCategory = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The icon for this category
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	The id of the category
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The name of the category
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	*/
	this.getParents = function()  {
		var listEntries = base["parents"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = listEntries[i];
			}
		}
		return resultArray;
	}

	/*
	The plural name for the category
	*/
	this.getPluralName = function()  {
		return base["pluralName"];
	}

	/*
	Whether or not this category is tagged as the primary category
	*/
	this.getPrimary = function()  {
		return base["primary"];
	}

	/*
	The short name for the category
	*/
	this.getShortName = function()  {
		return base["shortName"];
	}
}


/*
 A checkin object
 
*/

var FoursquareCheckin = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	this.getBadges = function()  {
		var listEntries = getSubArrayByKey(base, "badges")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareBadge(listEntries[i]);
			}
		}
		return resultArray;
	}

	this.getComments = function()  {
		var listEntries = getSubArrayByKey(base, "comments")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareComment(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The epoch timestamp for when the checkin was created
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	The id the checkin
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Whether or not the checkin has been liked
	*/
	this.getLike = function()  {
		return base["like"];
	}

	/*
	Get likes for this checkin
	*/
	this.getLikes = function()  {
		return new  FoursquareLikes(base["likes"]);
	}

	/*
	Get information about overlapping checkins
	*/
	this.getOverlaps = function()  {
		var listEntries = getSubArrayByKey(base, "overlaps")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareOverlap(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get photos for this checkin
	*/
	this.getPhotos = function()  {
		var listEntries = getSubArrayByKey(base, "photos")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquarePhoto(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get the posts for this checkin. May not be present.
	*/
	this.getPosts = function()  {
		var listEntries = getSubArrayByKey(base, "posts")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquarePost(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get scores for this checkin
	*/
	this.getScores = function()  {
		var listEntries = getSubArrayByKey(base, "score")["scores"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareScore(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The message from check-in
	*/
	this.getShout = function()  {
		return base["shout"];
	}

	/*
	Get the source information for the app that created the checkin
	*/
	this.getSource = function()  {
		return new  FoursquareSource(base["source"]);
	}

	/*
	The timezone associated with this checkin
	*/
	this.getTimeZone = function()  {
		return base["timeZone"];
	}

	/*
	A string representation of the time zone where this check-in occurred
	*/
	this.getTimeZoneOffset = function()  {
		return base["timeZoneOffset"];
	}

	/*
	The type of foursquare object. One of checkin, shout, or venueless.
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	Get the user associated with this checkin
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}

	/*
	Get the venue for this checkin
	*/
	this.getVenue = function()  {
		return new  FoursquareVenue(base["venue"]);
	}
}


/*
 Contains the collaborators for this item
 
*/

var FoursquareCollaborator = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Contains the user objects that are collaborators
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["users"]);
	}
}


/*
 A list of comments objects
 
*/

var FoursquareComment = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	*/
	this.getText = function()  {
		return base["text"];
	}

	/*
	Get the user that left this comment
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}
}


/*
 An object containing twitter, phone, and formattedPhone of the user or venue contact. All can be present, and all can be absent from the response.
 
*/

var FoursquareContact = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The email address of the contact
	*/
	this.getEmail = function()  {
		return base["email"];
	}

	/*
	The facebook id of the contact
	*/
	this.getFacebook = function()  {
		return base["facebook"];
	}

	/*
	The formatted phone number of the contact
	*/
	this.getFormattedPhone = function()  {
		return base["formattedPhone"];
	}

	/*
	The unformatted phone number of the contact
	*/
	this.getPhone = function()  {
		return base["phone"];
	}

	/*
	The twitter handle of the contact
	*/
	this.getTwitter = function()  {
		return base["twitter"];
	}
}


/*
 Contains a count of tips that are done
 
*/

var FoursquareDone = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The number of tips that are done
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	Get groups of people that have marked this tip done
	*/
	this.getPeopleGroup = function()  {
		var listEntries = base["groups"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquarePeopleGroup(listEntries[i]);
			}
		}
		return resultArray;
	}
}


/*
 Contains details about venue events
   
*/

var FoursquareEvent = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Whether or not this is an all day event
	*/
	this.getAllDay = function()  {
		return base["allDay"];
	}

	/*
	Get categories for this event
	*/
	this.getCategories = function()  {
		var listEntries = base["categories"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareCategory(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The date of the even as an epoch timestamp
	*/
	this.getDate = function()  {
		return base["date"];
	}

	/*
	Get foreign ids
	*/
	this.getForeignIds = function()  {
		var listEntries = getSubArrayByKey(base, "foreignIds")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareForeignIds(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get the people at this event now
	*/
	this.getHereNow = function()  {
		return new  FoursquareHereNow(base["hereNow"]);
	}

	/*
	The event id
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The name of the event
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	Get stats for the event
	*/
	this.getStats = function()  {
		return new  FoursquareStats(base["stats"]);
	}

	/*
	The event timezone
	*/
	this.getTimeZone = function()  {
		return base["timeZone"];
	}

	/*
	The url for the event
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


/*
 An object containing the count of followers for the item
 
*/

var FoursquareFollowers = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The number of followers for this todo
	*/
	this.getCount = function()  {
		return base["count"];
	}
}


/*
 Contains the domain and id of the third party provider
     
*/

var FoursquareForeignIds = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The domain of the 3rd party provider
	*/
	this.getDomain = function()  {
		return base["domain"];
	}

	/*
	The id of the 3rd party provider
	*/
	this.getId = function()  {
		return base["id"];
	}
}


/*
 Contains information about who is here now
 
*/

var FoursquareHereNow = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The number of people here now
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	Contains friends and others as types
	*/
	this.getPeopleGroups = function()  {
		var listEntries = base["groups"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquarePeopleGroup(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	A summary of people here now
	*/
	this.getSummary = function()  {
		return base["summary"];
	}
}


/*

     
*/

var FoursquareHereNowItem = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	When the checkin was created in epoch format
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	The id of the checkin
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Whether or not this checkin is from the mayor
	*/
	this.getIsMayor = function()  {
		return base["isMayor"];
	}

	/*
	The timezone associated with the checkin
	*/
	this.getTimeZone = function()  {
		return base["timeZone"];
	}

	/*
	The timezone offset associated with the checkin
	*/
	this.getTimeZoneOffset = function()  {
		return base["timeZoneOffset"];
	}

	/*
	The type of checkin
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	Get the user details
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}
}


/*
 Contains a count and list of people at this venue right now
   
*/

var FoursquareHereNowList = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The total number of people here now
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	Get checkins and user info for people here now
	*/
	this.getHereNowItems = function()  {
		var listEntries = base["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareHereNowItem(listEntries[i]);
			}
		}
		return resultArray;
	}
}


/*
 Contains the hours during the week that the venue is open along with any named hours segments in a human-readable format
   
*/

var FoursquareHours = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Whether or not the venue is open
	*/
	this.getIsOpen = function()  {
		return base["isOpen"];
	}

	/*
	The venue status
	*/
	this.getStatus = function()  {
		return base["status"];
	}

	/*
	Get the timeframe information for the venue including days of operation
	*/
	this.getTimeframes = function()  {
		var listEntries = base["timeframes"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareTimeframe(listEntries[i]);
			}
		}
		return resultArray;
	}
}


/*

         
*/

var FoursquareImage = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The name of the image used to contruct the complete image url
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The beginning portion of the image url used to contruct the complete image url
	*/
	this.getPrefix = function()  {
		return base["prefix"];
	}

	/*
	The available image sizes used to construct the complete image url
	*/
	this.getSizes = function()  {
		var listEntries = base["sizes"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = listEntries[i];
			}
		}
		return resultArray;
	}
}


/*
 Contains information about insights related to this checkin
     
*/

var FoursquareInsight = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The url for the appropriate foursquare icon
	*/
	this.getImage = function()  {
		return base["image"];
	}

	/*
	Get the points information for the insight
	*/
	this.getPoints = function()  {
		return new  FoursquarePoints(base["points"]);
	}

	/*
	The title of the insight
	*/
	this.getTitle = function()  {
		return base["title"];
	}

	/*
	The type of insight
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 A list item object
 
*/

var FoursquareItem = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Whether or not this item has been done
	*/
	this.getDone = function()  {
		return base["done"];
	}

	/*
	The id of the item
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get lists for the authenticated user
	*/
	this.getListed = function()  {
		return new  FoursquareListed(base["listed"]);
	}

	/*
	Get the tip for this item
	*/
	this.getTip = function()  {
		return new  FoursquareTip(base["tip"]);
	}

	/*
	Whether or not this item is a todo
	*/
	this.getTodo = function()  {
		return base["todo"];
	}

	/*
	Get the venue that this item is for
	*/
	this.getVenue = function()  {
		return new  FoursquareVenue(base["venue"]);
	}

	/*
	How many times the venue is has been visited
	*/
	this.getVisitedCount = function()  {
		return base["visitedCount"];
	}
}


/*
 Contains a list of words that are suggested for the user to input as refinements
     
*/

var FoursquareKeywords = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The display name of the keyword
	*/
	this.getDisplayName = function()  {
		return base["displayName"];
	}

	/*
	The suggested keyword
	*/
	this.getKeyword = function()  {
		return base["keyword"];
	}
}


/*
 A leaderboard object
     
*/

var FoursquareLeaderboard = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The leaderboard rank
	*/
	this.getRank = function()  {
		return base["rank"];
	}

	/*
	Get leaderboard scores
	*/
	this.getLeaderboardScores = function()  {
		return new  FoursquareLeaderboardScores(base["scores"]);
	}

	/*
	Get the user for this leaderboard
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}
}


/*
 Contains leaderboard items for the authenticated user
   
*/

var FoursquareLeaderboardItem = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getRank = function()  {
		return base["rank"];
	}

	/*
	Get statitics related to the leaderboard score
	*/
	this.getLeaderboardScores = function()  {
		return new  FoursquareLeaderboardScores(base["scores"]);
	}

	/*
	Get the user on this leaderboard
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}
}


/*
 Cotains leaderboard scores for the authenticated user
       
*/

var FoursquareLeaderboardScores = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The user's total checkin count over the past 7 days
	*/
	this.getCheckinsCount = function()  {
		return base["checkinsCount"];
	}

	/*
	If the user has never scored more than a certain number of points, then this field is returned (current value is 50)
	*/
	this.getGoal = function()  {
		return base["goal"];
	}

	/*
	The highest 7-day score the user has ever achieved
	*/
	this.getMax = function()  {
		return base["max"];
	}

	/*
	The user's total score over the past 7 days
	*/
	this.getRecent = function()  {
		return base["recent"];
	}
}


/*
 Contains a count and group of people who liked an object
 
*/

var FoursquareLikes = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The count of users liked the object
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	Contains groups of friends and others that have liked an object
	*/
	this.getPeopleGroups = function()  {
		var listEntries = base["groups"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquarePeopleGroup(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The summary of likes
	*/
	this.getSummary = function()  {
		return base["summary"];
	}
}


/*
 A list object
 
*/

var FoursquareList = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The canonical URL for the list
	*/
	this.getCanonicalUrl = function()  {
		return base["canonicalUrl"];
	}

	/*
	Get categories for the list
	*/
	this.getCategories = function()  {
		var listEntries = getSubArrayByKey(base, "categories")["item"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareCategory(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Whether or not the list has collaborators
	*/
	this.getCollaborative = function()  {
		return base["collaborative"];
	}

	/*
	Get collaborators for this list
	*/
	this.getCollaborators = function()  {
		var listEntries = getSubArrayByKey(base, "collaborators")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareCollaborator(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The description of the list
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	The count of items that are done
	*/
	this.getDoneCount = function()  {
		return base["doneCount"];
	}

	/*
	Whether or not the list is editable
	*/
	this.getEditable = function()  {
		return base["editable"];
	}

	/*
	Get the count of followers
	*/
	this.getFollowers = function()  {
		return new  FoursquareFollowers(base["followers"]);
	}

	/*
	Whether or not there are followers of the list
	*/
	this.getFollowing = function()  {
		return base["following"];
	}

	/*
	The id of the list
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get the list items
	*/
	this.getItems = function()  {
		var listEntries = getSubArrayByKey(base, "listItems")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareItem(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The name of the list
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	Whether not the list is editable by others
	*/
	this.getPublic = function()  {
		return base["public"];
	}

	/*
	The type of list
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	The list url
	*/
	this.getUrl = function()  {
		return base["url"];
	}

	/*
	Get the user who created this list
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}

	/*
	The venue count for this list
	*/
	this.getVenueCount = function()  {
		return base["venueCount"];
	}

	/*
	The count of visits
	*/
	this.getVisitedCount = function()  {
		return base["visitedCount"];
	}
}


/*
 Contains the followers of the list
   
*/

var FoursquareListFollower = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The canonical URL for the user following the list
	*/
	this.getCanonicalUrl = function()  {
		return base["canonicalUrl"];
	}

	/*
	The first name of the user following the list
	*/
	this.getFirstName = function()  {
		return base["firstName"];
	}

	/*
	The gender of the user who is following the list
	*/
	this.getGender = function()  {
		return base["gender"];
	}

	/*
	The home city of the user who is following the list
	*/
	this.getHomeCity = function()  {
		return base["homeCity"];
	}

	/*
	The id of the user who is following the list
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The last name of the user who is following the list
	*/
	this.getLastName = function()  {
		return base["lastName"];
	}

	/*
	The url to the photo of the follower
	*/
	this.getPhoto = function()  {
		return base["photo"];
	}

	this.getTipsCount = function()  {
		return new  FoursquareTipsCount(base["tips"]);
	}
}


/*
 Contains groups of list including created, edited, followed, friends, or other
 
*/

var FoursquareListGroup = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The count of groups returned
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	Get lists
	*/
	this.getLists = function()  {
		var listEntries = base["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareList(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The type of group
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 Contains a count of lists that contain this venue
 
*/

var FoursquareListed = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	A count of lists
	*/
	this.getCount = function()  {
		return base["count"];
	}

	this.getListedItems = function()  {
		var listEntries = base["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareListedItems(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	A summary field for the listed items
	*/
	this.getSummary = function()  {
		return base["summary"];
	}
}


/*
 Contains list objects for the authenitcated user
   
*/

var FoursquareListedItems = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The canonical url for the list
	*/
	this.getCanonicalUrl = function()  {
		return base["canonicalUrl"];
	}

	/*
	Whether or not this list is editable by the owner's friends
	*/
	this.getCollaborative = function()  {
		return base["collaborative"];
	}

	/*
	The epoch timestamp for when this list was created
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	The description of the list
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	Whether or not this item is editable
	*/
	this.getEditable = function()  {
		return base["editable"];
	}

	/*
	Get the follower count for this list item
	*/
	this.getFollowers = function()  {
		return new  FoursquareFollowers(base["followers"]);
	}

	/*
	The id of this item
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get the list items
	*/
	this.getItems = function()  {
		var listEntries = getSubArrayByKey(base, "listItems")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareItem(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The name of the list
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	Whether or not the list is public
	*/
	this.getPublic = function()  {
		return base["public"];
	}

	/*
	An epoch timestamp representing the last update time for the list
	*/
	this.getUpdatedAt = function()  {
		return base["updatedAt"];
	}

	/*
	The url for the list
	*/
	this.getUrl = function()  {
		return base["url"];
	}

	/*
	Get the user who created the list
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}
}


/*
 Contains location information for the venue
 
*/

var FoursquareLocation = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The venue address
	*/
	this.getAddress = function()  {
		return base["address"];
	}

	/*
	The country abbreviation field for the venue address
	*/
	this.getCc = function()  {
		return base["cc"];
	}

	/*
	The city that the venue is in
	*/
	this.getCity = function()  {
		return base["city"];
	}

	/*
	The country field for the venue address
	*/
	this.getCountry = function()  {
		return base["country"];
	}

	/*
	The cross street of the venue
	*/
	this.getCrossStreet = function()  {
		return base["crossStreet"];
	}

	/*
	The latitude coordinate for the venue
	*/
	this.getLat = function()  {
		return base["lat"];
	}

	/*
	The longitude coordinate for the venue
	*/
	this.getLng = function()  {
		return base["lng"];
	}

	/*
	The postal code of the venue
	*/
	this.getPostalCode = function()  {
		return base["postalCode"];
	}

	/*
	The state that the venue is in
	*/
	this.getState = function()  {
		return base["state"];
	}
}


/*
 An object containing information about the mayor of a venue
 
*/

var FoursquareMayor = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	Contains the user information for the venue mayor
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}
}


/*
 Contains venues that this user is mayor of
   
*/

var FoursquareMayorship = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	this.getVenue = function()  {
		return new  FoursquareVenue(base["venue"]);
	}
}


/*
 An object containing url and mobileUrl that display the menu information for this venue
 
*/

var FoursquareMenu = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The mobile url of the menu
	*/
	this.getMobileUrl = function()  {
		return base["mobileUrl"];
	}

	/*
	The type of menu
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	The url for the menu
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


/*
 An object containing the status code from Foursquare
 
*/

var FoursquareMeta = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The response status code from Foursquare
	*/
	this.getCode = function()  {
		return base["code"];
	}
}


/*
 Contains notifications of different types including insights, notificationTray, mayorship, score, message, leaderboard, etc.
 
*/

var FoursquareNotification = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Get an individual notification item
	*/
	this.getNotificationItem = function()  {
		return new  FoursquareNotificationItem(base["item"]);
	}

	/*
	The type of notification
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 Contains
   
*/

var FoursquareNotificationItem = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The number of checkins
	*/
	this.getCheckins = function()  {
		return base["checkins"];
	}

	/*
	The url for the user image
	*/
	this.getImage = function()  {
		return base["image"];
	}

	/*
	Get insights
	*/
	this.getInsights = function()  {
		var listEntries = getSubArrayByKey(base, "insights")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareInsight(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get the scores for this checkin
	*/
	this.getScores = function()  {
		var listEntries = getSubArrayByKey(base, "item")["scores"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareScore(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get the leadboard object for the authenticated user
	*/
	this.getLeaderboard = function()  {
		var listEntries = base["leaderboard"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareLeaderboard(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The notification message
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	The total number of items
	*/
	this.getTotal = function()  {
		return base["total"];
	}

	/*
	The type of notification item
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	The number of unread notifications
	*/
	this.getUnreadCount = function()  {
		return base["unreadCount"];
	}

	/*
	Get the user information for this notification item
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}
}


/*
 The segments of the days in this timeframe in which the venue is open
       
*/

var FoursquareOpen = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The time the venue closes in HHMM (24hr) format
	*/
	this.getEnd = function()  {
		return base["end"];
	}

	/*
	The human readable version the open and close times
	*/
	this.getRenderedTime = function()  {
		return base["renderedTime"];
	}

	/*
	The time the venue opens in HHMM (24hr) format
	*/
	this.getStart = function()  {
		return base["start"];
	}
}


/*
 Contains information about overlapping checkins
   
*/

var FoursquareOverlap = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The epoch timestamp for the overlapping checkin
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	The id of the overlapping ehckin
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The timezone for the overlapping checkin
	*/
	this.getTimeZone = function()  {
		return base["timeZone"];
	}

	/*
	The timezone offset for the checkin
	*/
	this.getTimeZoneOffset = function()  {
		return base["timeZoneOffset"];
	}

	/*
	The type of foursquare object
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	Get the users overlapping with the checkin
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}
}


/*
 An object containing the count of page updates
   
*/

var FoursquarePageUpdates = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The count of updates
	*/
	this.getCount = function()  {
		return base["count"];
	}
}


/*
 Contains friends and others as types
 
*/

var FoursquarePeopleGroup = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The number of people here
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	Get users in this group
	*/
	this.getUsers = function()  {
		var listEntries = base["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareUser(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The name of the group
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The group type
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 Contains a photo object
 
*/

var FoursquarePhoto = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	The height of the photo in pixels
	*/
	this.getHeight = function()  {
		return base["height"];
	}

	/*
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The start of the URL for this photo
	*/
	this.getPrefix = function()  {
		return base["prefix"];
	}

	this.getSizes = function()  {
		var listEntries = getSubArrayByKey(base, "sizes")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareSize(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get the source information for this photo
	*/
	this.getSource = function()  {
		return new  FoursquareSource(base["source"]);
	}

	/*
	The end of the URL for this photo
	*/
	this.getSuffix = function()  {
		return base["suffix"];
	}

	/*
	Get the tip for this photo
	*/
	this.getTip = function()  {
		return new  FoursquareTip(base["tip"]);
	}

	/*
	*/
	this.getUrl = function()  {
		return base["url"];
	}

	/*
	Get the user that took this photo
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}

	/*
	Get the venue associated with this photo
	*/
	this.getVenue = function()  {
		return new  FoursquareVenue(base["venue"]);
	}

	/*
	*/
	this.getVisibility = function()  {
		return base["visibility"];
	}

	/*
	The width of this photo in pixels
	*/
	this.getWidth = function()  {
		return base["width"];
	}
}


/*
 Contains checkin photos and venue photos
 
*/

var FoursquarePhotoGroup = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	Get a photo associated with the venue
	*/
	this.getPhotos = function()  {
		var listEntries = base["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquarePhoto(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The name of the photo group
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The photo group type
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 Contains information for points for the insight
       
*/

var FoursquarePoints = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	this.getImage = function()  {
		return new  FoursquareImage(base["image"]);
	}

	/*
	A foursquare generated message about the checkin
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	The number of points
	*/
	this.getPoints = function()  {
		return base["points"];
	}
}


/*
 Contains information about the checkin post including the id, text, timestamp, and source information
 
*/

var FoursquarePost = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The timestamp that the post was created in epoch format
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	The id of the post created
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get the source for this post
	*/
	this.getSource = function()  {
		return new  FoursquareSource(base["source"]);
	}

	/*
	The text of the post
	*/
	this.getText = function()  {
		return base["text"];
	}
}


/*
 Contains price information for this venue
   
*/

var FoursquarePrice = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The message for pricing
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	The pricing tier
	*/
	this.getTier = function()  {
		return base["tier"];
	}
}


/*
 Contains information about why this place may be of interest to the acting user
         
*/

var FoursquareReason = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The message text for the reason
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	The reason type
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 Contains recent checkins for the authenticated user
   
*/

var FoursquareRecent = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The epoch timestamp for when the checkin created
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	The checkin id
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get photos for recent checkins
	*/
	this.getPhotos = function()  {
		var listEntries = getSubArrayByKey(base, "photos")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquarePhoto(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get the source information for this checkin
	*/
	this.getSource = function()  {
		return new  FoursquareSource(base["source"]);
	}

	/*
	The timezone associated with this checkin
	*/
	this.getTimeZone = function()  {
		return base["timeZone"];
	}

	/*
	String representation of the time zone where this check-in occurred
	*/
	this.getTimeZoneOffset = function()  {
		return base["timeZoneOffset"];
	}

	/*
	The type of checkin. One of checkin, shout, or venueless.
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	Get the user for this checkin
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}

	/*
	Get the venue that was checked into
	*/
	this.getVenue = function()  {
		return new  FoursquareVenue(base["venue"]);
	}
}


/*

     
*/

var FoursquareRecommendationGroup = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	this.getRecommendationItem = function()  {
		var listEntries = base["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareRecommendationItem(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The name of the group
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The group type
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*

       
*/

var FoursquareRecommendationItem = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Get reasons why this place may be of interest to the acting user
	*/
	this.getReasons = function()  {
		var listEntries = getSubArrayByKey(base, "reasons")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareReason(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get suggested tips
	*/
	this.getTips = function()  {
		var listEntries = base["tips"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareTip(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get suggested venues
	*/
	this.getVenue = function()  {
		return new  FoursquareVenue(base["venue"]);
	}
}


/*
 
*/

var FoursquareRecommendations = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	this.getRecommendationGroups = function()  {
		var listEntries = base["groups"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareRecommendationGroup(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	A full text name for the location the user searched
	*/
	this.getHeaderFullLocation = function()  {
		return base["headerFullLocation"];
	}

	/*
	A text name for the location the user searched
	*/
	this.getHeaderLocation = function()  {
		return base["headerLocation"];
	}

	/*
	More granular location information
	*/
	this.getHeaderLocationGranularity = function()  {
		return base["headerLocationGranularity"];
	}

	/*
	A message to the user based on their current context
	*/
	this.getHeaderMessage = function()  {
		return base["headerMessage"];
	}

	/*
	Get keyword suggestions
	*/
	this.getKeywords = function()  {
		return new  FoursquareKeywords(getSubArrayByKey(base, "keywords")["items"]);
	}

	/*
	When no radius is specified, this represents the radius that was used for the query (based upon the density of venues in the query area)
	*/
	this.getSuggestedRadius = function()  {
		return base["suggestedRadius"];
	}

	/*
	Get warnings about the request
	*/
	this.getWarning = function()  {
		return new  FoursquareWarning(base["warning"]);
	}
}


/*
 Contains a reply object
 
*/

var FoursquareReply = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The epoch timestamp for the reply
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	The reply id
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get the source that created this reply
	*/
	this.getSource = function()  {
		return new  FoursquareSource(base["source"]);
	}

	/*
	The text of the reply
	*/
	this.getText = function()  {
		return base["text"];
	}

	/*
	The url the reply
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


/*
 Contains the scores for this checkin
 
*/

var FoursquareScore = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	*/
	this.getPoints = function()  {
		return base["points"];
	}
}


/*
 Contains the named segments of the days in this timeframe in which the venue is open
       
*/

var FoursquareSegment = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The time as HHMM (24hr) at which the segment ends
	*/
	this.getEnd = function()  {
		return base["end"];
	}

	/*
	The time as HHMM (24hr) at which the segment begins
	*/
	this.getStart = function()  {
		return base["start"];
	}
}


/*
 Contains badge IDs and badge image information
   
*/

var FoursquareSet = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Get badge image info
	*/
	this.getBadgeImage = function()  {
		return new  FoursquareBadgeImage(base["image"]);
	}

	/*
	Contains badge ids
	*/
	this.getBadgeIDs = function()  {
		var listEntries = base["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = listEntries[i];
			}
		}
		return resultArray;
	}

	/*
	The name of the badge
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The badge type
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 Available sizes for an image
 
*/

var FoursquareSize = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The height of an image
	*/
	this.getHeight = function()  {
		return base["height"];
	}

	/*
	The url for an image
	*/
	this.getUrl = function()  {
		return base["url"];
	}

	/*
	The width of the image
	*/
	this.getWidth = function()  {
		return base["width"];
	}
}


/*
 An object containing the source information about this object
 
*/

var FoursquareSource = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The detail url for the application that created the object
	*/
	this.getDetailUrl = function()  {
		return base["detailUrl"];
	}

	/*
	The icon for the application that create the object
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	The id of the application that created the object
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The name of the application that created the object
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The link to the photo of the application that created the object
	*/
	this.getPhoto = function()  {
		return base["photo"];
	}

	/*
	The url for the application that created the object
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


/*
 Contains specials offered by a venue
 
*/

var FoursquareSpecial = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	*/
	this.getFinePrint = function()  {
		return base["finePrint"];
	}

	/*
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	*/
	this.getProvider = function()  {
		return base["provider"];
	}

	/*
	*/
	this.getRedemption = function()  {
		return base["redemption"];
	}

	/*
	*/
	this.getTitle = function()  {
		return base["title"];
	}

	/*
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 Contains a list of specials
   
*/

var FoursquareSpecialsList = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The special description
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	The fine print of the special
	*/
	this.getFinePrint = function()  {
		return base["finePrint"];
	}

	/*
	The icon name
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	The special id
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get the likes for the special
	*/
	this.getLikes = function()  {
		return new  FoursquareLikes(base["likes"]);
	}

	/*
	The message text for this special
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	The provider of the special
	*/
	this.getProvider = function()  {
		return base["provider"];
	}

	/*
	The redemption type
	*/
	this.getRedemption = function()  {
		return base["redemption"];
	}

	/*
	The title of the special
	*/
	this.getTitle = function()  {
		return base["title"];
	}

	/*
	The special type
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	Get the venue offering the special
	*/
	this.getVenue = function()  {
		return new  FoursquareVenue(base["venue"]);
	}
}


/*
 Contains statistics for the venue including checkinsCount, tipCount, and userCount
 
*/

var FoursquareStats = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The total number of checkins for this venue
	*/
	this.getCheckinsCount = function()  {
		return base["checkinsCount"];
	}

	/*
	The number of tips for this venue
	*/
	this.getTipCount = function()  {
		return base["tipCount"];
	}

	/*
	The total number of users that have checked into this venue
	*/
	this.getUsersCount = function()  {
		return base["usersCount"];
	}
}


/*
 An object containing the days
     
*/

var FoursquareTimeframe = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Days represented as integers with Monday = 1,..., Sunday = 7 on which these hours apply
	*/
	this.getDays = function()  {
		return base["days"];
	}

	/*
	Indicates if this timeframe includes today
	*/
	this.getIncludesToday = function()  {
		return base["includesToday"];
	}

	/*
	Get the start, end, and rendered time for the venue
	*/
	this.getOpen = function()  {
		var listEntries = base["open"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareOpen(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get segment information for the venue
	*/
	this.getSegments = function()  {
		var listEntries = base["segments"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareSegment(listEntries[i]);
			}
		}
		return resultArray;
	}
}


/*
 Contains information about tips associated with a venue
 
*/

var FoursquareTip = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The url for the tip
	*/
	this.getCanonicalUrl = function()  {
		return base["canonicalUrl"];
	}

	/*
	The date that this tip was created in epoch format
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	Get the count of tips that have been done
	*/
	this.getDone = function()  {
		return new  FoursquareDone(base["done"]);
	}

	/*
	The id of the tip
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get the photos for this tip
	*/
	this.getPhoto = function()  {
		return new  FoursquarePhoto(getSubArrayByKey(base, "items")["photo"]);
	}

	/*
	Get the likes for this tip
	*/
	this.getLikes = function()  {
		return new  FoursquareLikes(base["likes"]);
	}

	/*
	The url to the photo
	*/
	this.getPhotourl = function()  {
		return base["photourl"];
	}

	/*
	The text of the tip
	*/
	this.getText = function()  {
		return base["text"];
	}

	/*
	Get to count of todos for this tip
	*/
	this.getTodo = function()  {
		return new  FoursquareTodo(base["todo"]);
	}

	/*
	The tip url
	*/
	this.getUrl = function()  {
		return base["url"];
	}

	/*
	Get the user that created this tip
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}
}


/*
 Contains tip details including users that have marked a tip done and users that have marked a tip as a todo
 
*/

var FoursquareTipDetails = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The url for the tip
	*/
	this.getCanonicalUrl = function()  {
		return base["canonicalUrl"];
	}

	/*
	An epoch timestamp when the tip was created
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	Get the info for user who have marked this tip done
	*/
	this.getDone = function()  {
		return new  FoursquareDone(base["done"]);
	}

	/*
	The id of this tip
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Whether or not the tip has been liked
	*/
	this.getLike = function()  {
		return base["like"];
	}

	/*
	Get the likes for this tip
	*/
	this.getLikes = function()  {
		return new  FoursquareLikes(base["likes"]);
	}

	/*
	Get the the count of tip
	*/
	this.getListed = function()  {
		return new  FoursquareListed(base["listed"]);
	}

	/*
	The actual tip
	*/
	this.getText = function()  {
		return base["text"];
	}

	/*
	Get information about people that have indicated this tip as a todo
	*/
	this.getTodo = function()  {
		return new  FoursquareTodo(base["todo"]);
	}

	/*
	Get the user that created this tip
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}

	/*
	Get the venue associated with this tip
	*/
	this.getVenue = function()  {
		return new  FoursquareVenue(base["venue"]);
	}
}


/*
 Contains tips from others and friends
   
*/

var FoursquareTipGroup = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	Get tips for the venue
	*/
	this.getTips = function()  {
		var listEntries = base["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareTip(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The name of the tip group
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The type of tip
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 Contains the total count of tips for this user
 
*/

var FoursquareTipsCount = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getCount = function()  {
		return base["count"];
	}
}


/*
 An object containing the count of ToDos for this tip
 
*/

var FoursquareTodo = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	Get the groups of people that want to do this tip
	*/
	this.getPeopleGroup = function()  {
		var listEntries = base["groups"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquarePeopleGroup(listEntries[i]);
			}
		}
		return resultArray;
	}
}


/*
 Contains categories of todos associated with the venue
     
*/

var FoursquareTodoCategory = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The icon for the todo category
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	The id of the todo category
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The name of the todo category
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The plural name of the todo category
	*/
	this.getPluralName = function()  {
		return base["pluralName"];
	}

	/*
	The short name of the todo category
	*/
	this.getShortName = function()  {
		return base["shortName"];
	}
}


/*
 Contains information about a todo list for the venue
   
*/

var FoursquareTodos = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The canonical url for the todo
	*/
	this.getCanonicalUrl = function()  {
		return base["canonicalUrl"];
	}

	this.getTodoCategories = function()  {
		var listEntries = getSubArrayByKey(getSubArrayByKey(base, "categories"), "items")["category"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareTodoCategory(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Whether or not other users have edited this todo
	*/
	this.getCollaborative = function()  {
		return base["collaborative"];
	}

	/*
	Get collaborators for the todo item
	*/
	this.getCollaborators = function()  {
		var listEntries = getSubArrayByKey(base, "collaborators")["items"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareCollaborator(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	A description of the todo
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	The count of todos marked done
	*/
	this.getDoneCount = function()  {
		return base["doneCount"];
	}

	/*
	Whether or not this todo is editable
	*/
	this.getEditable = function()  {
		return base["editable"];
	}

	/*
	Get the number of followers for this to do
	*/
	this.getFollowers = function()  {
		return new  FoursquareFollowers(base["followers"]);
	}

	/*
	Whether or not the acting user is following the list
	*/
	this.getFollowing = function()  {
		return base["following"];
	}

	/*
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The name of the todo item
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	Whether or not this todo is public
	*/
	this.getPublic = function()  {
		return base["public"];
	}

	/*
	The type of todo
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	The url of the todo
	*/
	this.getUrl = function()  {
		return base["url"];
	}

	/*
	The user that created the todo for this venue
	*/
	this.getUser = function()  {
		return new  FoursquareUser(base["user"]);
	}

	/*
	The venue count for the todo
	*/
	this.getVenueCount = function()  {
		return base["venueCount"];
	}

	/*
	The count of visits
	*/
	this.getVisitedCount = function()  {
		return base["visitedCount"];
	}
}


/*
 A user object
 
*/

var FoursquareUser = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The bio of the user
	*/
	this.getBio = function()  {
		return base["bio"];
	}

	/*
	An object containing twitter, phone, and formattedPhone of the user
	*/
	this.getContact = function()  {
		return new  FoursquareContact(base["contact"]);
	}

	/*
	*/
	this.getFirstName = function()  {
		return base["firstName"];
	}

	/*
	*/
	this.getGender = function()  {
		return base["gender"];
	}

	/*
	*/
	this.getHomeCity = function()  {
		return base["homeCity"];
	}

	/*
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	*/
	this.getLastName = function()  {
		return base["lastName"];
	}

	this.getListGroup = function()  {
		var listEntries = getSubArrayByKey(base, "lists")["groups"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareListGroup(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	*/
	this.getPhoto = function()  {
		return base["photo"];
	}

	/*
	Contains the total count of tips and groups with friends and others
	*/
	this.getTipsCount = function()  {
		return new  FoursquareTipsCount(base["tips"]);
	}
}


/*
 An containing information about foursquare venue
 
*/

var FoursquareVenue = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Contains count of the number of times the acting user has been here. Absent if there is no acting user
	*/
	this.getBeenHere = function()  {
		return new  FoursquareBeenHere(base["beenHere"]);
	}

	/*
	*/
	this.getCanonicalUrl = function()  {
		return base["canonicalUrl"];
	}

	/*
	Categories that have been applied to this venue
	*/
	this.getCategories = function()  {
		var listEntries = base["categories"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareCategory(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	An object containing twitter, phone, and formattedPhone of the user or venue contact. All can be present, and all can be absent from the response.
	*/
	this.getContact = function()  {
		return new  FoursquareContact(base["contact"]);
	}

	/*
	The date the venue was created in epoch format
	*/
	this.getCreatedAt = function()  {
		return base["createdAt"];
	}

	/*
	Whether or not a menu is available for this venue
	*/
	this.getHasMenu = function()  {
		return base["hasMenu"];
	}

	/*
	Contains information about who is here now
	*/
	this.getHereNow = function()  {
		return new  FoursquareHereNow(base["hereNow"]);
	}

	/*
	Get the hours that the venue is open
	*/
	this.getHours = function()  {
		return new  FoursquareHours(base["hours"]);
	}

	/*
	The id of the venue
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The count of users who have liked this object, and groups containing any friends and others who have liked it
	*/
	this.getLikes = function()  {
		return new  FoursquareLikes(base["likes"]);
	}

	/*
	A grouped response of lists that contain this venue
	*/
	this.getListed = function()  {
		return new  FoursquareListed(base["listed"]);
	}

	/*
	An object containing the location information for the venue
	*/
	this.getLocation = function()  {
		return new  FoursquareLocation(base["location"]);
	}

	/*
	An object containing information about the mayor of the venue
	*/
	this.getMayor = function()  {
		return new  FoursquareMayor(base["mayor"]);
	}

	/*
	An object containing url and mobileUrl that display the menu information for this venue
	*/
	this.getMenu = function()  {
		return new  FoursquareMenu(base["menu"]);
	}

	/*
	The name of the venue
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	Get the count of page updates
	*/
	this.getPageUpdates = function()  {
		return new  FoursquarePageUpdates(base["pageUpdates"]);
	}

	/*
	Contain information about photos for this venue
	*/
	this.getPhotoGroups = function()  {
		var listEntries = getSubArrayByKey(base, "photos")["groups"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquarePhotoGroup(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get price information for this venue
	*/
	this.getPrice = function()  {
		return new  FoursquarePrice(base["price"]);
	}

	/*
	The venue rating
	*/
	this.getRating = function()  {
		return base["rating"];
	}

	/*
	The short url for the venue
	*/
	this.getShortUrl = function()  {
		return base["shortUrl"];
	}

	/*
	Contains information about specials offered by the venue
	*/
	this.getSpecials = function()  {
		var listEntries = base["specials"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareSpecial(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Contains statistics for the venue including checkinsCount, tipCount, and userCount
	*/
	this.getStats = function()  {
		return new  FoursquareStats(base["stats"]);
	}

	/*
	Contains tags for this venue
	*/
	this.getTags = function()  {
		var listEntries = base["tags"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = listEntries[i];
			}
		}
		return resultArray;
	}

	/*
	The timezone for this venue
	*/
	this.getTimeZone = function()  {
		return base["timeZone"];
	}

	/*
	Get tips from others and friends
	*/
	this.getTipGroups = function()  {
		var listEntries = getSubArrayByKey(base, "tips")["groups"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FoursquareTipGroup(listEntries[i]);
			}
		}
		return resultArray;
	}

	this.getTodos = function()  {
		return new  FoursquareTodos(base["todos"]);
	}

	/*
	The url for this venue
	*/
	this.getUrl = function()  {
		return base["url"];
	}

	/*
	Whether or not the venue has been verified
	*/
	this.getVerified = function()  {
		return base["verified"];
	}
}


/*
 Contains an object with a text field that contains a warning message
     
*/

var FoursquareWarning = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The warning message
	*/
	this.getText = function()  {
		return base["text"];
	}
}


