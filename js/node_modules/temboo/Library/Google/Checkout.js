
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    CancelOrder
    Cancels an order that's been submitted to a Google Checkout merchant account.
*/


var CancelOrder = function(session) {
    /*
        Create a new instance of the CancelOrder Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Google/Checkout/CancelOrder"
    CancelOrder.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CancelOrderResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CancelOrderInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CancelOrder
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CancelOrderInputSet = function() {
    CancelOrderInputSet.super_.call(this);
        /*
        Set the value of the Comment input for this Choreo. ((required, string) The comment for the order cancellation)
        */
        this.set_Comment = function(value) {
            this.setInput("Comment", value);
        }

        /*
        Set the value of the Endpoint input for this Choreo. ((optional, string) Set to checkout.google.com when running in production. Defaults to sandbox.google.com for sandbox testing.)
        */
        this.set_Endpoint = function(value) {
            this.setInput("Endpoint", value);
        }

        /*
        Set the value of the MerchantId input for this Choreo. ((required, integer) The Merchant Id provided by Google)
        */
        this.set_MerchantId = function(value) {
            this.setInput("MerchantId", value);
        }

        /*
        Set the value of the MerchantKey input for this Choreo. ((required, string) The Merchant Key provided by Google)
        */
        this.set_MerchantKey = function(value) {
            this.setInput("MerchantKey", value);
        }

        /*
        Set the value of the OrderNumber input for this Choreo. ((required, integer) The unique identifier for the order (There is an order number column in your Google Checkout Inbox).)
        */
        this.set_OrderNumber = function(value) {
            this.setInput("OrderNumber", value);
        }

        /*
        Set the value of the Reason input for this Choreo. ((required, string) The reason for the cancellation)
        */
        this.set_Reason = function(value) {
            this.setInput("Reason", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CancelOrder Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CancelOrderResultSet = function(resultStream) {
    CancelOrderResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Google)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CancelOrder, choreography.Choreography);
util.inherits(CancelOrderInputSet, choreography.InputSet);
util.inherits(CancelOrderResultSet, choreography.ResultSet);
exports.CancelOrder = CancelOrder;


/*
    ChargeAndShipOrder
    Charge and ship an order once a shopping cart order has arrived in your Google Checkout Inbox.
*/


var ChargeAndShipOrder = function(session) {
    /*
        Create a new instance of the ChargeAndShipOrder Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Google/Checkout/ChargeAndShipOrder"
    ChargeAndShipOrder.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ChargeAndShipOrderResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ChargeAndShipOrderInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ChargeAndShipOrder
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ChargeAndShipOrderInputSet = function() {
    ChargeAndShipOrderInputSet.super_.call(this);
        /*
        Set the value of the Amount input for this Choreo. ((decimal) The dollar amount to charge (i.e. 25.50))
        */
        this.set_Amount = function(value) {
            this.setInput("Amount", value);
        }

        /*
        Set the value of the Carrier input for this Choreo. ((string) The desired postal carrier (i.e. UPS))
        */
        this.set_Carrier = function(value) {
            this.setInput("Carrier", value);
        }

        /*
        Set the value of the Endpoint input for this Choreo. ((optional, string) Set to checkout.google.com when running in production. Defaults to sandbox.google.com for sandbox testing.)
        */
        this.set_Endpoint = function(value) {
            this.setInput("Endpoint", value);
        }

        /*
        Set the value of the MerchantId input for this Choreo. ((integer) The Merchant Id provided by Google)
        */
        this.set_MerchantId = function(value) {
            this.setInput("MerchantId", value);
        }

        /*
        Set the value of the MerchantKey input for this Choreo. ((string) The Merchant Key provided by Google)
        */
        this.set_MerchantKey = function(value) {
            this.setInput("MerchantKey", value);
        }

        /*
        Set the value of the OrderNumber input for this Choreo. ((integer) The unique identifier for the order (There is an order number column in your Google Checkout Inbox).)
        */
        this.set_OrderNumber = function(value) {
            this.setInput("OrderNumber", value);
        }

        /*
        Set the value of the TrackingNumber input for this Choreo. ((string) The tracking number for the order package)
        */
        this.set_TrackingNumber = function(value) {
            this.setInput("TrackingNumber", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ChargeAndShipOrder Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ChargeAndShipOrderResultSet = function(resultStream) {
    ChargeAndShipOrderResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Google)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ChargeAndShipOrder, choreography.Choreography);
util.inherits(ChargeAndShipOrderInputSet, choreography.InputSet);
util.inherits(ChargeAndShipOrderResultSet, choreography.ResultSet);
exports.ChargeAndShipOrder = ChargeAndShipOrder;


/*
    CreateOrder
    Populates a shopping cart and sends order information to your merchant  account allowing a user to complete an order using Google Checkout.
*/


var CreateOrder = function(session) {
    /*
        Create a new instance of the CreateOrder Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Google/Checkout/CreateOrder"
    CreateOrder.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateOrderResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateOrderInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateOrder
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateOrderInputSet = function() {
    CreateOrderInputSet.super_.call(this);
        /*
        Set the value of the Endpoint input for this Choreo. ((optional, string) Set to checkout.google.com when running in production. Defaults to sandbox.google.com for sandbox testing.)
        */
        this.set_Endpoint = function(value) {
            this.setInput("Endpoint", value);
        }

        /*
        Set the value of the ItemDescription input for this Choreo. ((string) The description of the shopping cart item)
        */
        this.set_ItemDescription = function(value) {
            this.setInput("ItemDescription", value);
        }

        /*
        Set the value of the ItemName input for this Choreo. ((string) A name of the shopping cart item)
        */
        this.set_ItemName = function(value) {
            this.setInput("ItemName", value);
        }

        /*
        Set the value of the MerchantId input for this Choreo. ((integer) The Merchant Id provided by Google)
        */
        this.set_MerchantId = function(value) {
            this.setInput("MerchantId", value);
        }

        /*
        Set the value of the MerchantKey input for this Choreo. ((string) The Merchant Key provided by Google)
        */
        this.set_MerchantKey = function(value) {
            this.setInput("MerchantKey", value);
        }

        /*
        Set the value of the Quanity input for this Choreo. ((integer) The quantity of the shopping cart item)
        */
        this.set_Quanity = function(value) {
            this.setInput("Quanity", value);
        }

        /*
        Set the value of the ShippingMethod input for this Choreo. ((string) The shipping method for the order (i.e. SuperShip Ground))
        */
        this.set_ShippingMethod = function(value) {
            this.setInput("ShippingMethod", value);
        }

        /*
        Set the value of the ShippingPrice input for this Choreo. ((decimal) The shipping price for the order)
        */
        this.set_ShippingPrice = function(value) {
            this.setInput("ShippingPrice", value);
        }

        /*
        Set the value of the UnitPrice input for this Choreo. ((decimal) The unit price of the item that is added to the shopping cart)
        */
        this.set_UnitPrice = function(value) {
            this.setInput("UnitPrice", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateOrder Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateOrderResultSet = function(resultStream) {
    CreateOrderResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Google.  Contains the redirect URL that a customer will use to complete the order.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateOrder, choreography.Choreography);
util.inherits(CreateOrderInputSet, choreography.InputSet);
util.inherits(CreateOrderResultSet, choreography.ResultSet);
exports.CreateOrder = CreateOrder;


/*
    RefundOrder
    Allows you to refund an order that's been submitted to your Google Checkout merchant account.
*/


var RefundOrder = function(session) {
    /*
        Create a new instance of the RefundOrder Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Google/Checkout/RefundOrder"
    RefundOrder.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RefundOrderResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RefundOrderInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RefundOrder
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RefundOrderInputSet = function() {
    RefundOrderInputSet.super_.call(this);
        /*
        Set the value of the Amount input for this Choreo. ((decimal) The amount to refund)
        */
        this.set_Amount = function(value) {
            this.setInput("Amount", value);
        }

        /*
        Set the value of the Comment input for this Choreo. ((string) The comment for the order refund)
        */
        this.set_Comment = function(value) {
            this.setInput("Comment", value);
        }

        /*
        Set the value of the Endpoint input for this Choreo. ((optional, string) Set to checkout.google.com when running in production. Defaults to sandbox.google.com for sandbox testing.)
        */
        this.set_Endpoint = function(value) {
            this.setInput("Endpoint", value);
        }

        /*
        Set the value of the MerchantId input for this Choreo. ((integer) The Merchant Id provided by Google)
        */
        this.set_MerchantId = function(value) {
            this.setInput("MerchantId", value);
        }

        /*
        Set the value of the MerchantKey input for this Choreo. ((string) The Merchant Key provided by Google)
        */
        this.set_MerchantKey = function(value) {
            this.setInput("MerchantKey", value);
        }

        /*
        Set the value of the OrderNumber input for this Choreo. ((integer) The unique identifier for the order (There is an order number column in your Google Checkout Inbox).)
        */
        this.set_OrderNumber = function(value) {
            this.setInput("OrderNumber", value);
        }

        /*
        Set the value of the Reason input for this Choreo. ((string) The reason for the refund)
        */
        this.set_Reason = function(value) {
            this.setInput("Reason", value);
        }

        /*
        Set the value of the SandboxMode input for this Choreo. ((optional, boolean) Set this flag to 1 when using this Choreo with the Google Checkout sandbox endpoint (i.e. sandbox.google.com). Defaults to 0.)
        */
        this.set_SandboxMode = function(value) {
            this.setInput("SandboxMode", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RefundOrder Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RefundOrderResultSet = function(resultStream) {
    RefundOrderResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "ExecutionStatus" output from this Choreo execution. (Contains status information on the Choreo execution)
        */
        this.get_ExecutionStatus = function() {
            return this.getResult("ExecutionStatus");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Google)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RefundOrder, choreography.Choreography);
util.inherits(RefundOrderInputSet, choreography.InputSet);
util.inherits(RefundOrderResultSet, choreography.ResultSet);
exports.RefundOrder = RefundOrder;


/*
    TestAccount
    Allows you to perform simple test to verify connectivity with your Google Checkout account.
*/


var TestAccount = function(session) {
    /*
        Create a new instance of the TestAccount Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Google/Checkout/TestAccount"
    TestAccount.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new TestAccountResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new TestAccountInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the TestAccount
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var TestAccountInputSet = function() {
    TestAccountInputSet.super_.call(this);
        /*
        Set the value of the Endpoint input for this Choreo. ((optional, string) Set to checkout.google.com when running in production. Defaults to sandbox.google.com for sandbox testing.)
        */
        this.set_Endpoint = function(value) {
            this.setInput("Endpoint", value);
        }

        /*
        Set the value of the MerchantId input for this Choreo. ((required, integer) The Merchant Id provided by Google)
        */
        this.set_MerchantId = function(value) {
            this.setInput("MerchantId", value);
        }

        /*
        Set the value of the MerchantKey input for this Choreo. ((required, string) The Merchant Key provided by Google)
        */
        this.set_MerchantKey = function(value) {
            this.setInput("MerchantKey", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the TestAccount Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var TestAccountResultSet = function(resultStream) {
    TestAccountResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Google)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(TestAccount, choreography.Choreography);
util.inherits(TestAccountInputSet, choreography.InputSet);
util.inherits(TestAccountResultSet, choreography.ResultSet);
exports.TestAccount = TestAccount;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


