
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    CreateCoupon
    Creates a coupon that can be redeemed by customers for a discount.
*/


var CreateCoupon = function(session) {
    /*
        Create a new instance of the CreateCoupon Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/Coupons/CreateCoupon"
    CreateCoupon.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateCouponResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateCouponInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateCoupon
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateCouponInputSet = function() {
    CreateCouponInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by Stripe)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the CouponID input for this Choreo. ((optional, string) The unique identifier of your choice for the coupon. If not specified, a random code will be generated by Stripe.)
        */
        this.set_CouponID = function(value) {
            this.setInput("CouponID", value);
        }

        /*
        Set the value of the DurationInMonths input for this Choreo. ((optional, integer) If Duration is set to 'repeating', specify the number of months the discount will be valid.)
        */
        this.set_DurationInMonths = function(value) {
            this.setInput("DurationInMonths", value);
        }

        /*
        Set the value of the Duration input for this Choreo. ((required, string) Indicates how long the discount will be in effect. Valid values are: forever, once, repeating.)
        */
        this.set_Duration = function(value) {
            this.setInput("Duration", value);
        }

        /*
        Set the value of the MaxRedemptions input for this Choreo. ((optional, integer) Specify the number times the coupon can be used.)
        */
        this.set_MaxRedemptions = function(value) {
            this.setInput("MaxRedemptions", value);
        }

        /*
        Set the value of the PercentOff input for this Choreo. ((required, integer) A integer between 1 and 100 that represents the discount that the coupon will apply when used by a customer)
        */
        this.set_PercentOff = function(value) {
            this.setInput("PercentOff", value);
        }

        /*
        Set the value of the RedeemBy input for this Choreo. ((optional, date) An epoch timestamp in seconds representing the the last time at which the coupon can be used. Specify timestamp in UTC.)
        */
        this.set_RedeemBy = function(value) {
            this.setInput("RedeemBy", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateCoupon Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateCouponResultSet = function(resultStream) {
    CreateCouponResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    A coupon contains information about a percent-off discount you might want to apply to a customer. Coupons only apply to invoices created for recurring subscriptions and invoice items; they do not apply to one-off charges.
    */
    this.getCoupon = function()  {
    	return new  StripeCoupon(JSON.parse(this.getResult('Response')));
    }
}

util.inherits(CreateCoupon, choreography.Choreography);
util.inherits(CreateCouponInputSet, choreography.InputSet);
util.inherits(CreateCouponResultSet, choreography.ResultSet);
exports.CreateCoupon = CreateCoupon;


/*
    DeleteCoupon
    Deletes a specified coupon.
*/


var DeleteCoupon = function(session) {
    /*
        Create a new instance of the DeleteCoupon Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/Coupons/DeleteCoupon"
    DeleteCoupon.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteCouponResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteCouponInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteCoupon
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteCouponInputSet = function() {
    DeleteCouponInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by Stripe)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the CouponID input for this Choreo. ((required, string) The unique identifier of the coupon you wish to delete)
        */
        this.set_CouponID = function(value) {
            this.setInput("CouponID", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteCoupon Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteCouponResultSet = function(resultStream) {
    DeleteCouponResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    */
    this.getDeleteResults = function()  {
    	return new  StripeDeleteResults(JSON.parse(this.getResult('Response')));
    }
}

util.inherits(DeleteCoupon, choreography.Choreography);
util.inherits(DeleteCouponInputSet, choreography.InputSet);
util.inherits(DeleteCouponResultSet, choreography.ResultSet);
exports.DeleteCoupon = DeleteCoupon;


/*
    ListAllCoupons
    Retrieves a a list of your coupons.
*/


var ListAllCoupons = function(session) {
    /*
        Create a new instance of the ListAllCoupons Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/Coupons/ListAllCoupons"
    ListAllCoupons.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ListAllCouponsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ListAllCouponsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ListAllCoupons
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ListAllCouponsInputSet = function() {
    ListAllCouponsInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by Stripe)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Count input for this Choreo. ((optional, integer) A limit on the number of coupons to be returned. Valid values are 1 through 100.)
        */
        this.set_Count = function(value) {
            this.setInput("Count", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) An offset into your coupons array. The API will return the requested number of coupons starting at that the specified offset.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ListAllCoupons Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ListAllCouponsResultSet = function(resultStream) {
    ListAllCouponsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    an array of Coupons
    */
    this.getCouponList = function()  {
    	return new  StripeCouponList(JSON.parse(this.getResult('Response')));
    }
}

util.inherits(ListAllCoupons, choreography.Choreography);
util.inherits(ListAllCouponsInputSet, choreography.InputSet);
util.inherits(ListAllCouponsResultSet, choreography.ResultSet);
exports.ListAllCoupons = ListAllCoupons;


/*
    RetrieveCoupon
    Retrieves a coupon with specified coupon id.
*/


var RetrieveCoupon = function(session) {
    /*
        Create a new instance of the RetrieveCoupon Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/Coupons/RetrieveCoupon"
    RetrieveCoupon.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RetrieveCouponResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RetrieveCouponInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RetrieveCoupon
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RetrieveCouponInputSet = function() {
    RetrieveCouponInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by Stripe)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the CouponID input for this Choreo. ((required, string) The unique identifier of the coupon you want to retrieve)
        */
        this.set_CouponID = function(value) {
            this.setInput("CouponID", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RetrieveCoupon Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RetrieveCouponResultSet = function(resultStream) {
    RetrieveCouponResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    A coupon contains information about a percent-off discount you might want to apply to a customer. Coupons only apply to invoices created for recurring subscriptions and invoice items; they do not apply to one-off charges.
    */
    this.getCoupon = function()  {
    	return new  StripeCoupon(JSON.parse(this.getResult('Response')));
    }
}

util.inherits(RetrieveCoupon, choreography.Choreography);
util.inherits(RetrieveCouponInputSet, choreography.InputSet);
util.inherits(RetrieveCouponResultSet, choreography.ResultSet);
exports.RetrieveCoupon = RetrieveCoupon;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}



/*
 This is an object representing your Stripe account. You can retrieve it to see properties on the account like its current e-mail address or if the account is enabled yet to make live charges.
 
*/

var StripeAccountDetails = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Whether or not the account can create live charges
	*/
	this.getChargeEnabled = function()  {
		return base["charge_enabled"];
	}

	/*
	The currencies this account can submit when creating charges
	*/
	this.getCurrenciesSupported = function()  {
		var listEntries = base["currencies_supported"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = listEntries[i];
			}
		}
		return resultArray;
	}

	/*
	Whether or not account details have been submitted yet
	*/
	this.getDetailsSubmitted = function()  {
		return base["details_submitted"];
	}

	/*
	The primary user's email address
	*/
	this.getEmail = function()  {
		return base["email"];
	}

	/*
	A unique identifier for the account
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Value is "account"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	The text that will appear on credit card statements
	*/
	this.getStatementDescriptor = function()  {
		return base["statement_descriptor"];
	}
}


/*
 Object describing the card used to make the charge
 
*/

var StripeCard = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	billing address city, if provided when creating card
	*/
	this.getAddressCity = function()  {
		return base["address_city"];
	}

	/*
	Billing address country, if provided when creating card
	*/
	this.getAddressCountry = function()  {
		return base["address_country"];
	}

	/*
	line 1 of the address
	*/
	this.getAddressLine1 = function()  {
		return base["address_line1"];
	}

	/*
	If address_line1 was provided, results of the check: pass, fail, or unchecked.
	*/
	this.getAddressLine1Check = function()  {
		return base["address_line1_check"];
	}

	/*
	line 2 of the address
	*/
	this.getAddressLine2 = function()  {
		return base["address_line2"];
	}

	/*
	*/
	this.getAddressState = function()  {
		return base["address_state"];
	}

	/*
	zip code
	*/
	this.getAddressZip = function()  {
		return base["address_zip"];
	}

	/*
	If address_zip was provided, results of the check: pass, fail, or unchecked.
	*/
	this.getAddressZipCheck = function()  {
		return base["address_zip_check"];
	}

	/*
	Two-letter ISO code representing the country of the card (as accurately as we can determine it). You could use this attribute to get a sense of the international breakdown of cards you've collected.
	*/
	this.getCountry = function()  {
		return base["country"];
	}

	/*
	Card's expiration month.
	*/
	this.getExpMonth = function()  {
		return base["exp_month"];
	}

	/*
	Card's expiration year. (yyyy).
	*/
	this.getExpYear = function()  {
		return base["exp_year"];
	}

	/*
	Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example.
	*/
	this.getFingerprint = function()  {
		return base["fingerprint"];
	}

	/*
	Last 4 digits of the card's number.
	*/
	this.getLast4 = function()  {
		return base["last4"];
	}

	/*
	Cardholder name
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	Value is always "card"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	Credit card type (visa/mastercard)
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 To charge a credit or a debit card, you create a new charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique random ID.
 
*/

var StripeCharge = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Amount (in the currency specified)
	*/
	this.getAmount = function()  {
		return base["amount"];
	}

	/*
	If the charge was created without capturing, this boolean represents whether or not it is still uncaptured or has since been captured.
	*/
	this.getCaptured = function()  {
		return base["captured"];
	}

	/*
	Object describing the card used to make the charge
	*/
	this.getCard = function()  {
		return new  StripeCard(base["card"]);
	}

	/*
	timestamp
	*/
	this.getCreated = function()  {
		return base["created"];
	}

	/*
	(3-letter ISO currency code)
	*/
	this.getCurrency = function()  {
		return base["currency"];
	}

	/*
	ID of the customer this charge is for if one exists
	*/
	this.getCustomer = function()  {
		return base["customer"];
	}

	/*
	description of the Charge
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	Details about the dispute if the charge has been disputed
	*/
	this.getDispute = function()  {
		return new  StripeDispute(base["dispute"]);
	}

	/*
	Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
	*/
	this.getDisputed = function()  {
		return base["disputed"];
	}

	/*
	Message to user further explaining reason for charge failure if available
	*/
	this.getFailureMessage = function()  {
		return base["failure_message"];
	}

	/*
	The fee (in cents) paid for this charge
	*/
	this.getFee = function()  {
		return base["fee"];
	}

	/*
	The fee details for this charge
	*/
	this.getFeeDetails = function()  {
		var listEntries = base["fee_details"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  StripeFeeDetails(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The unique ID of the charge
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	ID of the invoice this charge is for if one exists
	*/
	this.getInvoice = function()  {
		return base["invoice"];
	}

	/*
	In livemode, credit card transactions are actually processed.  In testmode, transactions don't go through the credit card network.
	*/
	this.getLivemode = function()  {
		return base["livemode"];
	}

	/*
	value is always "charge"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	Whether or not payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
	*/
	this.getPaid = function()  {
		return base["paid"];
	}

	/*
	Whether or not the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
	*/
	this.getRefunded = function()  {
		return base["refunded"];
	}
}


/*
 Returns a list of charges you've previously created. The charges are returned in sorted order, with the most recent charges appearing first.
 
*/

var StripeChargeList = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	A limit on the number of objects to be returned. Count can range between 1 and 100 items.
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	The Stripe Charge object
	*/
	this.getCharges = function()  {
		var listEntries = base["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  StripeCharge(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Value is always "list"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	URL to the REST API call
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


/*
 class Coupon coupon /_ // A coupon contains information about a percent-off discount you might want to apply to a customer. Coupons only apply to invoices created for recurring subscriptions and invoice items; they do not apply to one-off charges.

 
*/

var StripeCoupon = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Amount (in the currency specified)
	*/
	this.getAmountOff = function()  {
		return base["amount_off"];
	}

	/*
	(3-letter ISO currency code) If amount_off has been set, the currency of the amount to take off.
	*/
	this.getCurrency = function()  {
		return base["currency"];
	}

	/*
	One of forever, once, and repeating. Describes how long a customer who applies this coupon will get the discount.
	*/
	this.getDuration = function()  {
		return base["duration"];
	}

	/*
	If duration is repeating, the number of months the coupon applies. Null if coupon duration is forever or once.
	*/
	this.getDurationInMonths = function()  {
		return base["duration_in_months"];
	}

	/*
	the ID of coupon
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	In livemode, credit card transactions are actually processed.  In testmode, transactions don't go through the credit card network.
	*/
	this.getLivemode = function()  {
		return base["livemode"];
	}

	/*
	Maximum number of times this coupon can be redeemed by a customer before it is no longer valid.
	*/
	this.getMaxRedemptions = function()  {
		return base["max_redemptions"];
	}

	/*
	Value is always "coupon"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.
	*/
	this.getPercentOff = function()  {
		return base["percent_off"];
	}

	/*
	Date after which the coupon can no longer be redeemed
	*/
	this.getRedeemBy = function()  {
		return base["redeem_by"];
	}

	/*
	Number of times this coupon has been applied to a customer.
	*/
	this.getTimesRedeemed = function()  {
		return base["times_redeemed"];
	}
}


/*
 A associative array with a data property that contains an array of up to count coupons, starting at index offset. Each entry in the array is a separate coupon object. If no more coupons are available, the resulting array will be empty. This request should never return an error.
 
*/

var StripeCouponList = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	A limit on the number of objects to be returned. Count can range between 1 and 100 items.
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	a Stripe Coupon object
	*/
	this.getCoupons = function()  {
		var listEntries = base["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  StripeCoupon(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Value is always "list"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	url of the REST API call
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


/*

 
*/

var StripeCustomer = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Current balance, if any, being stored on the customer's account. If negative, the customer has credit to apply to the next invoice. If positive, the customer has an amount owed that will be added to the next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account for recurring charges.
	*/
	this.getAccountBalance = function()  {
		return base["account_balance"];
	}

	/*
	Object describing the current card on the customer, if there is one.
	*/
	this.getActiveCard = function()  {
		return new  StripeCard(base["active_card"]);
	}

	/*
	timestamp of when Customer was created
	*/
	this.getCreated = function()  {
		return base["created"];
	}

	/*
	description of the Customer
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	e-mail address of the Customer
	*/
	this.getEmail = function()  {
		return base["email"];
	}

	/*
	ID of the Customer
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	In livemode, credit card transactions are actually processed.  In testmode, transactions don't go through the credit card network.
	*/
	this.getLivemode = function()  {
		return base["livemode"];
	}

	/*
	*/
	this.getNextRecurringCharge = function()  {
		return new  StripeNextRecurringCharge(base["next_recurring_charge"]);
	}

	/*
	Value is always "customer"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	Object describing the Subscription type
	*/
	this.getSubscription = function()  {
		return new  StripeSubscription(base["subscription"]);
	}
}


/*
 Returns a list of your customers. The customers are returned sorted by creation date, with the most recently created customers appearing first.
 
*/

var StripeCustomerList = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	A limit on the number of objects to be returned. Count can range between 1 and 100 items.
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	a Stripe Customer object.
	*/
	this.getCustomers = function()  {
		var listEntries = base["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  StripeCustomer(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Value is always "list".
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	url of the REST API call
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


/*
  An object with the deleted object's ID and a deleted flag upon success. An error is returned otherwise, such as if the object has already been deleted.
 
*/

var StripeDeleteResults = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	A delete flag showing true on success.
	*/
	this.getDeleted = function()  {
		return base["deleted"];
	}

	/*
	ID of the deleted object
	*/
	this.getId = function()  {
		return base["id"];
	}
}


/*
 A dispute occurs when a customer questions your charge with their bank or credit card company. When a customer disputes your charge, you're given the opportunity to respond to the dispute with evidence that shows the charge is legitimate. You can find more information about the dispute process in our
 
*/

var StripeDispute = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
	*/
	this.getAmount = function()  {
		return base["amount"];
	}

	/*
	ID of the charge that was disputed
	*/
	this.getCharge = function()  {
		return base["charge"];
	}

	/*
	Date dispute was opened
	*/
	this.getCreated = function()  {
		return base["created"];
	}

	/*
	(3-letter ISO currency code)
	*/
	this.getCurrency = function()  {
		return base["currency"];
	}

	/*
	Evidence that you have submitted to demonstrate the charge is legitimate (proof of delivery, IP addresses of logins, text of invoices, etc.). 1000 characters maximum.
	*/
	this.getEvidence = function()  {
		return base["evidence"];
	}

	/*
	Date by which evidence must be submitted in order to successfully challenge dispute.
	*/
	this.getEvidenceDueBy = function()  {
		return base["evidence_due_by"];
	}

	/*
	In livemode, credit card transactions are actually processed.  In testmode, transactions don't go through the credit card network.
	*/
	this.getLivemode = function()  {
		return base["livemode"];
	}

	/*
	always "dispute"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	Reason given by cardholder for dispute. Possible values are duplicate, fraudulent, subscription_canceled, product_unacceptable, product_not_received, unrecognized, credit_not_processed, general.
	*/
	this.getReason = function()  {
		return base["reason"];
	}

	/*
	Current status of dispute. Possible values are won, lost, needs_response, under_review.
	*/
	this.getStatus = function()  {
		return base["status"];
	}
}


/*
 Detailed breakdown of fees (in cents) paid for this charge   
*/

var StripeFeeDetails = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Amount (in the currency specified)
	*/
	this.getAmount = function()  {
		return base["amount"];
	}

	/*
	Amount in cents refunded (can be less than the amount attribute on the charge if a partial refund was issued)
	*/
	this.getAmountRefunded = function()  {
		return base["amount_refunded"];
	}

	/*
	*/
	this.getApplication = function()  {
		return base["application"];
	}

	/*
	(3-letter ISO currency code)
	*/
	this.getCurrency = function()  {
		return base["currency"];
	}

	/*
	description of the fee
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	value always "stripe_fee"
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
  Invoices are statements of what a customer owes for a particular billing period, including subscriptions, invoice items, and any automatic proration adjustments if necessary. Once an invoice is created, payment is automatically attempted. Note that the payment, while automatic, does not happen exactly at the time of invoice creation. If you have configured webhooks, the invoice will wait until one hour after the last webhook is successfully sent (or the last webhook times out after failing). Any customer credit on the account is applied before determining how much is due for that invoice (the amount that will be actually charged). If the amount due for the invoice is less than 50 cents (the minimum for a charge), we add the amount to the customer's running account balance to be added to the next invoice. If this amount is negative, it will act as a credit to offset the next invoice. Note that the customer account balance does not include unpaid invoices; it only includes balances that need to be taken into account when calculating the amount due for the next invoice.
 
*/

var StripeInvoice = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.
	*/
	this.getAmountDue = function()  {
		return base["amount_due"];
	}

	/*
	Number of automatic payment attempts made for this invoice. Does not include manual attempts to pay the invoice.
	*/
	this.getAttemptCount = function()  {
		return base["attempt_count"];
	}

	/*
	Whether or not an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the invoice.created webhook, for example, so you might not want to display that invoice as unpaid to your users.
	*/
	this.getAttempted = function()  {
		return base["attempted"];
	}

	/*
	ID of the charge
	*/
	this.getCharge = function()  {
		return base["charge"];
	}

	/*
	Whether or not the invoice is still trying to collect payment. An invoice is closed if it's either paid or it has been marked closed. A closed invoice will no longer attempt to collect payment.
	*/
	this.getClosed = function()  {
		return base["closed"];
	}

	/*
	(3-letter ISO currency code)
	*/
	this.getCurrency = function()  {
		return base["currency"];
	}

	/*
	ID of the customer
	*/
	this.getCustomer = function()  {
		return base["customer"];
	}

	/*
	timestamp
	*/
	this.getDate = function()  {
		return base["date"];
	}

	/*
	Ending customer balance after attempting to pay invoice. If the invoice has not been attempted yet, this will be nu
	*/
	this.getEndingBalance = function()  {
		return base["ending_balance"];
	}

	/*
	ID of the Invoice
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	*/
	this.getLines = function()  {
		return new  StripeLines(base["lines"]);
	}

	/*
	In livemode, credit card transactions are actually processed.  In testmode, transactions don't go through the credit card network.
	*/
	this.getLivemode = function()  {
		return base["livemode"];
	}

	/*
	timestamp
	*/
	this.getNextPaymentAttempt = function()  {
		return base["next_payment_attempt"];
	}

	/*
	Value is always "invoice"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	Whether or not payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
	*/
	this.getPaid = function()  {
		return base["paid"];
	}

	/*
	timestamp.  End of the usage period the invoice covers
	*/
	this.getPeriodEnd = function()  {
		return base["period_end"];
	}

	/*
	timestamp.  Start of the usage period the invoice covers
	*/
	this.getPeriodStart = function()  {
		return base["period_start"];
	}

	/*
	Starting customer balance before attempting to pay invoice. If the invoice has not been attempted yet, this will be the current customer balance.
	*/
	this.getStartingBalance = function()  {
		return base["starting_balance"];
	}

	/*
	Total of all subscriptions, invoice items, and prorations on the invoice before any discount is applied
	*/
	this.getSubtotal = function()  {
		return base["subtotal"];
	}

	/*
	Total after discount
	*/
	this.getTotal = function()  {
		return base["total"];
	}
}


/*
 An Invoice Line Item
 
*/

var StripeInvoiceItem = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Amount (in the currency specified)
	*/
	this.getAmount = function()  {
		return base["amount"];
	}

	/*
	(3-letter ISO currency code)
	*/
	this.getCurrency = function()  {
		return base["currency"];
	}

	/*
	ID of the Customer
	*/
	this.getCustomer = function()  {
		return base["customer"];
	}

	/*
	timestamp
	*/
	this.getDate = function()  {
		return base["date"];
	}

	/*
	A text description of the line item
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	The ID of the source of this line item, either an invoice item or a subscription
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	ID of the invoice
	*/
	this.getInvoice = function()  {
		return base["invoice"];
	}

	/*
	In livemode, credit card transactions are actually processed.  In testmode, transactions don't go through the credit card network.
	*/
	this.getLivemode = function()  {
		return base["livemode"];
	}

	/*
	value is always "invoiceitem"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	The period this InvoiceItme covers
	*/
	this.getPeriod = function()  {
		return new  StripePeriod(base["period"]);
	}

	/*
	The plan of the subscription, if the line item is a subscription
	*/
	this.getPlan = function()  {
		return new  StripePlan(base["plan"]);
	}

	/*
	Whether or not this is a proration
	*/
	this.getProration = function()  {
		return base["proration"];
	}
}


/*
 A List of InvoiceItems
 
*/

var StripeInvoiceItemList = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	A limit on the number of objects to be returned. Count can range between 1 and 100 items.
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	a reference to a Stripe Invoice Item object
	*/
	this.getInvoiceItems = function()  {
		var listEntries = base["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  StripeInvoiceItem(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	value is always "list"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	url to the REST API call
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


/*
 A associative array with a data property that contains an array of invoice objects. Returns an error if the customer ID is invalid.
 
*/

var StripeInvoiceList = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	A limit on the number of objects to be returned. Count can range between 1 and 100 items.
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	A reference to a Stripe Invoice object
	*/
	this.getInvoices = function()  {
		var listEntries = base["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  StripeInvoice(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Value is always "list"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	url to the REST API call
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


/*

   
*/

var StripeLines = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	*/
	this.getInvoiceItems = function()  {
		var listEntries = base["invoiceitems"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  StripeInvoiceItem(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	*/
	this.getSubscriptions = function()  {
		var listEntries = base["subscriptions"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  StripeSubscription(listEntries[i]);
			}
		}
		return resultArray;
	}
}


/*
 Object describing the amount and date of the next recurring charge
   
*/

var StripeNextRecurringCharge = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Amount (in the currency specified)
	*/
	this.getAmount = function()  {
		return base["amount"];
	}

	/*
	timestamp
	*/
	this.getDate = function()  {
		return base["date"];
	}
}


/*
 Covers a billing period for a Subscription or InvoiceItem
 
*/

var StripePeriod = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	timestamp of the end of billing period.
	*/
	this.getEnd = function()  {
		return base["end"];
	}

	/*
	timestamp of the start of the billing period.
	*/
	this.getStart = function()  {
		return base["start"];
	}
}


/*
 class Plan plan /_ // A subscription plan contains the pricing information for different products and feature levels on your site. For example, you might have a $10/month plan for basic features and a different $20/month plan for premium features.

 
*/

var StripePlan = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The amount in cents to be charged on the interval specified
	*/
	this.getAmount = function()  {
		return base["amount"];
	}

	/*
	(3-letter ISO currency code) Currency in which subscription will be charged
	*/
	this.getCurrency = function()  {
		return base["currency"];
	}

	/*
	the ID of the Plan
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	One of month or year. The frequency with which a subscription should be billed.
	*/
	this.getInterval = function()  {
		return base["interval"];
	}

	/*
	The number of the unit specified in the interval parameter. For example, you could specify an interval_count of 3 and an interval of 'month' for quarterly billing (every 3 months).
	*/
	this.getIntervalCount = function()  {
		return base["interval_count"];
	}

	/*
	In livemode, credit card transactions are actually processed.  In testmode, transactions don't go through the credit card network.
	*/
	this.getLivemode = function()  {
		return base["livemode"];
	}

	/*
	Display name of the plan
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	Value is always "plan"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	Number of trial period days granted when subscribing a customer to this plan. Null if the plan has no trial period
	*/
	this.getTrialPeriodDays = function()  {
		return base["trial_period_days"];
	}
}


/*
 A associative array with a data property that contains an array of up to count plans, starting at index offset. Each entry in the array is a separate plan object. If no more plans are available, the resulting array will be empty. This request should never return an error.
 
*/

var StripePlanList = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	A limit on the number of objects to be returned. Count can range between 1 and 100 items.
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	A Stripe Plan Object
	*/
	this.getPlans = function()  {
		var listEntries = base["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  StripePlan(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Value is always "list"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	url to the REST API call
	*/
	this.getUrl = function()  {
		return base["url"];
	}
}


/*
 Subscriptions allow you to charge a customer's card on a recurring basis. A subscription ties a customer to a particular plan you've created.
 
*/

var StripeSubscription = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Amount (in the currency specified)
	*/
	this.getAmount = function()  {
		return base["amount"];
	}

	/*
	If the subscription has been canceled with the at_period_end flag set to true, cancel_at_period_end on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
	*/
	this.getCancelAtPeriodEnd = function()  {
		return base["cancel_at_period_end"];
	}

	/*
	If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with cancel_at_period_end, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
	*/
	this.getCanceledAt = function()  {
		return base["canceled_at"];
	}

	/*
	(3-letter ISO currency code)
	*/
	this.getCurrency = function()  {
		return base["currency"];
	}

	/*
	End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
	*/
	this.getCurrentPeriodEnd = function()  {
		return base["current_period_end"];
	}

	/*
	Start of the current period that the subscription has been invoiced for
	*/
	this.getCurrentPeriodStart = function()  {
		return base["current_period_start"];
	}

	/*
	Object describing the customer
	*/
	this.getCustomer = function()  {
		return base["customer"];
	}

	/*
	description of the Subscription
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	If the subscription has ended (either because it was canceled or because the customer was switched to a subscription to a new plan), the date the subscription ended
	*/
	this.getEndedAt = function()  {
		return base["ended_at"];
	}

	/*
	ID of the subscription
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Value always "subscription"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	The period this subscription covers
	*/
	this.getPeriod = function()  {
		return new  StripePeriod(base["period"]);
	}

	/*
	Object describing the plan the customer is subscribed to
	*/
	this.getPlan = function()  {
		return new  StripePlan(base["plan"]);
	}

	/*
	Whether or not this is a proration
	*/
	this.getProration = function()  {
		return base["proration"];
	}

	/*
	number of subscriptions
	*/
	this.getQuantity = function()  {
		return base["quantity"];
	}

	/*
	timestamp.  Date the subscription started
	*/
	this.getStart = function()  {
		return base["start"];
	}

	/*
	Possible values are trialing, active, past_due, canceled, or unpaid. A subscription still in its trial period is trialing and moves to active when the trial period is over. When payment to renew the subscription fails, the subscription becomes past_due. After Stripe has exhausted all payment retry attempts, the subscription ends up with a status of either canceled or unpaid depending on your retry settings. Note that when a subscription has a status of unpaid, any future invoices will not be attempted until the customer's card details are updated.
	*/
	this.getStatus = function()  {
		return base["status"];
	}

	/*
	If the subscription has a trial, the end of that trial.
	*/
	this.getTrialEnd = function()  {
		return base["trial_end"];
	}

	/*
	If the subscription has a trial, the beginning of that trial.
	*/
	this.getTrialStart = function()  {
		return base["trial_start"];
	}

	/*
	the Type of the object
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
  Often you want to be able to charge credit cards without having to hold sensitive card information on your own servers. Stripe.js makes this easy in the browser, but you can use the same technique in other environments with our card token API. Card tokens can be created with your publishable API key, which can safely be embedded in downloadable applications like iPhone and Android apps. You can then use a token anywhere in our API that a card is accepted. Note that tokens are not meant to be stored or used more than once -- to store payment details for use later, you should create a Customer object.
 
*/

var StripeToken = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Amount (in the currency specified)
	*/
	this.getAmount = function()  {
		return base["amount"];
	}

	/*
	Object describing the card used to make the charge
	*/
	this.getCard = function()  {
		return new  StripeCard(base["card"]);
	}

	/*
	Object describing the card used to make the charge
	*/
	this.getCreated = function()  {
		return base["created"];
	}

	/*
	(3-letter ISO currency code)
	*/
	this.getCurrency = function()  {
		return base["currency"];
	}

	/*
	ID of the Token
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	In livemode, credit card transactions are actually processed.  In testmode, transactions don't go through the credit card network.
	*/
	this.getLivemode = function()  {
		return base["livemode"];
	}

	/*
	Value is always "token"
	*/
	this.getObject = function()  {
		return base["object"];
	}

	/*
	Whether or not this token has already been used (tokens can be used only once)
	*/
	this.getUsed = function()  {
		return base["used"];
	}
}


