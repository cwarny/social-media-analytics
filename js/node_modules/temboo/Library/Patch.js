
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    FindLocationByName
    Return Patch location information for a specified U.S. region.
*/


var FindLocationByName = function(session) {
    /*
        Create a new instance of the FindLocationByName Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Patch/FindLocationByName"
    FindLocationByName.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FindLocationByNameResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FindLocationByNameInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FindLocationByName
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FindLocationByNameInputSet = function() {
    FindLocationByNameInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) A valid API key provided by Patch.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the APISecret input for this Choreo. ((required, string) The API shared secret provided by Patch.)
        */
        this.set_APISecret = function(value) {
            this.setInput("APISecret", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Specify a maximum number of locations to return, between 1 and 100. The default is 10.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the RegionName input for this Choreo. ((required, string) Enter a state, city, neighborhood, district (county), locality (borough), or metro area name; a place name, such as a business, landmark, or park; or a ZIP code. Separate multiple names with commas.)
        */
        this.set_RegionName = function(value) {
            this.setInput("RegionName", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify "xml" to convert the Patch JSON response to XML, or "json" (the default) to not convert.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FindLocationByName Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FindLocationByNameResultSet = function(resultStream) {
    FindLocationByNameResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Coordinates" output from this Choreo execution. ((string) The concatenated location latitude and longitude returned by Patch.)
        */
        this.get_Coordinates = function() {
            return this.getResult("Coordinates");
        }
        /*
        Retrieve the value for the "Latitude" output from this Choreo execution. ((decimal) The latitude for the location returned by Patch.)
        */
        this.get_Latitude = function() {
            return this.getResult("Latitude");
        }
        /*
        Retrieve the value for the "LocationID" output from this Choreo execution. ((string) )
        */
        this.get_LocationID = function() {
            return this.getResult("LocationID");
        }
        /*
        Retrieve the value for the "Longitude" output from this Choreo execution. ((decimal) The longitude for the location returned by Patch.)
        */
        this.get_Longitude = function() {
            return this.getResult("Longitude");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response returned from Patch.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(FindLocationByName, choreography.Choreography);
util.inherits(FindLocationByNameInputSet, choreography.InputSet);
util.inherits(FindLocationByNameResultSet, choreography.ResultSet);
exports.FindLocationByName = FindLocationByName;


/*
    FindStoriesByCity
    Return the most recent stories from a specified U.S. city.
*/


var FindStoriesByCity = function(session) {
    /*
        Create a new instance of the FindStoriesByCity Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Patch/FindStoriesByCity"
    FindStoriesByCity.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FindStoriesByCityResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FindStoriesByCityInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FindStoriesByCity
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FindStoriesByCityInputSet = function() {
    FindStoriesByCityInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) A valid API key provided by Patch.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the APISecret input for this Choreo. ((required, string) The API shared secret provided by Patch.)
        */
        this.set_APISecret = function(value) {
            this.setInput("APISecret", value);
        }

        /*
        Set the value of the City input for this Choreo. ((required, string) The name of the city to return stories for.)
        */
        this.set_City = function(value) {
            this.setInput("City", value);
        }

        /*
        Set the value of the Keyword input for this Choreo. ((optional, string) Specify one or more words or phrases to find in the story title, story summary, and topic tags of the stories to return.)
        */
        this.set_Keyword = function(value) {
            this.setInput("Keyword", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Specify how many stories to return, between 1 and 100. The default is 10.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the MaximumAge input for this Choreo. ((optional, integer) Specify the maximum age in days of the stories to return, between 1 and 30. The default is 10.)
        */
        this.set_MaximumAge = function(value) {
            this.setInput("MaximumAge", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify "xml" to convert the Patch JSON response to XML. The default is "json".)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the State input for this Choreo. ((required, string) The U.S. state name or abbreviation corresponding to the city to return stories for.)
        */
        this.set_State = function(value) {
            this.setInput("State", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FindStoriesByCity Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FindStoriesByCityResultSet = function(resultStream) {
    FindStoriesByCityResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response returned from Patch.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(FindStoriesByCity, choreography.Choreography);
util.inherits(FindStoriesByCityInputSet, choreography.InputSet);
util.inherits(FindStoriesByCityResultSet, choreography.ResultSet);
exports.FindStoriesByCity = FindStoriesByCity;


/*
    FindStoriesByCoordinates
    Return the most recent stories from a specified U.S. latitude and longitude.
*/


var FindStoriesByCoordinates = function(session) {
    /*
        Create a new instance of the FindStoriesByCoordinates Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Patch/FindStoriesByCoordinates"
    FindStoriesByCoordinates.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FindStoriesByCoordinatesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FindStoriesByCoordinatesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FindStoriesByCoordinates
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FindStoriesByCoordinatesInputSet = function() {
    FindStoriesByCoordinatesInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) A valid API key provided by Patch.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the APISecret input for this Choreo. ((required, string) The API shared secret provided by Patch.)
        */
        this.set_APISecret = function(value) {
            this.setInput("APISecret", value);
        }

        /*
        Set the value of the Keyword input for this Choreo. ((optional, string) Specify one or more words or phrases to find in the story title, story summary, and topic tags of the stories to return.)
        */
        this.set_Keyword = function(value) {
            this.setInput("Keyword", value);
        }

        /*
        Set the value of the Latitude input for this Choreo. ((required, decimal) The latitiude for the area from which to retrieve stories. For example, "40.740512".)
        */
        this.set_Latitude = function(value) {
            this.setInput("Latitude", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Specify how many stories to return, between 1 and 100. The default is 10.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Longitude input for this Choreo. ((required, decimal) The longitude for the area from which to retrieve stories. For example, "-73.991479".)
        */
        this.set_Longitude = function(value) {
            this.setInput("Longitude", value);
        }

        /*
        Set the value of the MaximumAge input for this Choreo. ((optional, integer) Specify the maximum age in days of the stories to return, between 1 and 30. The default is 10.)
        */
        this.set_MaximumAge = function(value) {
            this.setInput("MaximumAge", value);
        }

        /*
        Set the value of the Radius input for this Choreo. ((optional, integer) Specify a radius in feet in which to search the specified coordinates, between 500 and 26,400. The default is 1,000 feet.)
        */
        this.set_Radius = function(value) {
            this.setInput("Radius", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify "xml" to convert the Patch JSON response to XML. The default is "json".)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FindStoriesByCoordinates Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FindStoriesByCoordinatesResultSet = function(resultStream) {
    FindStoriesByCoordinatesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response returned from Patch.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(FindStoriesByCoordinates, choreography.Choreography);
util.inherits(FindStoriesByCoordinatesInputSet, choreography.InputSet);
util.inherits(FindStoriesByCoordinatesResultSet, choreography.ResultSet);
exports.FindStoriesByCoordinates = FindStoriesByCoordinates;


/*
    FindStoriesByID
    Return the most recent stories from a specified U.S. city, state, ZIP code, or neighborhood using its Patch ID.
*/


var FindStoriesByID = function(session) {
    /*
        Create a new instance of the FindStoriesByID Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Patch/FindStoriesByID"
    FindStoriesByID.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FindStoriesByIDResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FindStoriesByIDInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FindStoriesByID
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FindStoriesByIDInputSet = function() {
    FindStoriesByIDInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) A valid API key provided by Patch.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the APISecret input for this Choreo. ((required, string) The API shared secret provided by Patch.)
        */
        this.set_APISecret = function(value) {
            this.setInput("APISecret", value);
        }

        /*
        Set the value of the Keyword input for this Choreo. ((optional, string) Specify one or more words or phrases to find in the story title, story summary, and topic tags of the stories to return.)
        */
        this.set_Keyword = function(value) {
            this.setInput("Keyword", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Specify how many stories to return, between 1 and 100. The default is 10.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the LocationID input for this Choreo. ((required, string) The UUID for a state, city, ZIP code, or neighborhood, assigned by Patch. Separate multiple IDs with commas but no spaces.)
        */
        this.set_LocationID = function(value) {
            this.setInput("LocationID", value);
        }

        /*
        Set the value of the MaximumAge input for this Choreo. ((optional, integer) Specify the maximum age in days of the stories to return, between 1 and 30. The default is 10.)
        */
        this.set_MaximumAge = function(value) {
            this.setInput("MaximumAge", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, boolean) Specify "xml" to convert the Patch JSON response to XML. The default is "json".)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FindStoriesByID Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FindStoriesByIDResultSet = function(resultStream) {
    FindStoriesByIDResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response returned from Patch.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(FindStoriesByID, choreography.Choreography);
util.inherits(FindStoriesByIDInputSet, choreography.InputSet);
util.inherits(FindStoriesByIDResultSet, choreography.ResultSet);
exports.FindStoriesByID = FindStoriesByID;


/*
    FindStoriesByNeighborhood
    Return the most recent stories from a specified U.S. neighborhood.
*/


var FindStoriesByNeighborhood = function(session) {
    /*
        Create a new instance of the FindStoriesByNeighborhood Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Patch/FindStoriesByNeighborhood"
    FindStoriesByNeighborhood.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FindStoriesByNeighborhoodResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FindStoriesByNeighborhoodInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FindStoriesByNeighborhood
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FindStoriesByNeighborhoodInputSet = function() {
    FindStoriesByNeighborhoodInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) A valid API key provided by Patch.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the APISecret input for this Choreo. ((required, string) The API shared secret provided by Patch.)
        */
        this.set_APISecret = function(value) {
            this.setInput("APISecret", value);
        }

        /*
        Set the value of the City input for this Choreo. ((required, string) The name of the city to return stories for.)
        */
        this.set_City = function(value) {
            this.setInput("City", value);
        }

        /*
        Set the value of the Keyword input for this Choreo. ((optional, string) Specify one or more words or phrases to find in the story title, story summary, and topic tags of the stories to return.)
        */
        this.set_Keyword = function(value) {
            this.setInput("Keyword", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Specify how many stories to return, between 1 and 100. The default is 10.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the MaximumAge input for this Choreo. ((optional, integer) Specify the maximum age in days of the stories to return, between 1 and 30. The default is 10.)
        */
        this.set_MaximumAge = function(value) {
            this.setInput("MaximumAge", value);
        }

        /*
        Set the value of the Neighborhood input for this Choreo. ((required, string) The name of the neighborhood in the corresponding city to return stories for. Common values include "downtown", "midtown", etc.)
        */
        this.set_Neighborhood = function(value) {
            this.setInput("Neighborhood", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify "xml" to convert the Patch JSON response to XML. The default is "json".)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the State input for this Choreo. ((required, string) The U.S. state name or abbreviation corresponding to the city to return stories for.)
        */
        this.set_State = function(value) {
            this.setInput("State", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FindStoriesByNeighborhood Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FindStoriesByNeighborhoodResultSet = function(resultStream) {
    FindStoriesByNeighborhoodResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response returned from Patch.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(FindStoriesByNeighborhood, choreography.Choreography);
util.inherits(FindStoriesByNeighborhoodInputSet, choreography.InputSet);
util.inherits(FindStoriesByNeighborhoodResultSet, choreography.ResultSet);
exports.FindStoriesByNeighborhood = FindStoriesByNeighborhood;


/*
    FindStoriesByState
    Return the most recent stories from a specified U.S. state.
*/


var FindStoriesByState = function(session) {
    /*
        Create a new instance of the FindStoriesByState Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Patch/FindStoriesByState"
    FindStoriesByState.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FindStoriesByStateResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FindStoriesByStateInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FindStoriesByState
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FindStoriesByStateInputSet = function() {
    FindStoriesByStateInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) A valid API key provided by Patch.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the APISecret input for this Choreo. ((required, string) The API shared secret provided by Patch.)
        */
        this.set_APISecret = function(value) {
            this.setInput("APISecret", value);
        }

        /*
        Set the value of the Keyword input for this Choreo. ((optional, string) Specify one or more words or phrases to find in the story title, story summary, and topic tags of the stories to return.)
        */
        this.set_Keyword = function(value) {
            this.setInput("Keyword", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Specify how many stories to return, between 1 and 100. The default is 10.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the MaximumAge input for this Choreo. ((optional, integer) Specify the maximum age in days of the stories to return, between 1 and 30. The default is 10.)
        */
        this.set_MaximumAge = function(value) {
            this.setInput("MaximumAge", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify "xml" to convert the Patch JSON response to XML. The default is "json".)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the State input for this Choreo. ((required, string) The U.S. state name or abbreviation for the stories to return.)
        */
        this.set_State = function(value) {
            this.setInput("State", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FindStoriesByState Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FindStoriesByStateResultSet = function(resultStream) {
    FindStoriesByStateResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response returned from Patch.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(FindStoriesByState, choreography.Choreography);
util.inherits(FindStoriesByStateInputSet, choreography.InputSet);
util.inherits(FindStoriesByStateResultSet, choreography.ResultSet);
exports.FindStoriesByState = FindStoriesByState;


/*
    FindStoriesByZIPCode
    Return the most recent stories from a specified U.S. ZIP code.
*/


var FindStoriesByZIPCode = function(session) {
    /*
        Create a new instance of the FindStoriesByZIPCode Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Patch/FindStoriesByZIPCode"
    FindStoriesByZIPCode.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FindStoriesByZIPCodeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FindStoriesByZIPCodeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FindStoriesByZIPCode
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FindStoriesByZIPCodeInputSet = function() {
    FindStoriesByZIPCodeInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) A valid API key provided by Patch.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the APISecret input for this Choreo. ((required, string) The API shared secret provided by Patch.)
        */
        this.set_APISecret = function(value) {
            this.setInput("APISecret", value);
        }

        /*
        Set the value of the Keyword input for this Choreo. ((optional, string) Specify one or more words or phrases to find in the story title, story summary, and topic tags of the stories to return.)
        */
        this.set_Keyword = function(value) {
            this.setInput("Keyword", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Specify how many stories to return, between 1 and 100. The default is 10.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the MaximumAge input for this Choreo. ((optional, integer) Specify the maximum age in days of the stories to return, between 1 and 30. The default is 10.)
        */
        this.set_MaximumAge = function(value) {
            this.setInput("MaximumAge", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify "xml" to convert the Patch JSON response to XML. The default is "json".)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the ZIPCode input for this Choreo. ((required, string) The ZIP code to return stories from.)
        */
        this.set_ZIPCode = function(value) {
            this.setInput("ZIPCode", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FindStoriesByZIPCode Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FindStoriesByZIPCodeResultSet = function(resultStream) {
    FindStoriesByZIPCodeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response returned from Patch.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(FindStoriesByZIPCode, choreography.Choreography);
util.inherits(FindStoriesByZIPCodeInputSet, choreography.InputSet);
util.inherits(FindStoriesByZIPCodeResultSet, choreography.ResultSet);
exports.FindStoriesByZIPCode = FindStoriesByZIPCode;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


