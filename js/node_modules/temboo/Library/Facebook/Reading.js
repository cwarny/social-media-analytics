
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    Accounts
    Retrieves a list of the Facebook apps and pages owned by the specified user.
*/


var Accounts = function(session) {
    /*
        Create a new instance of the Accounts Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Accounts"
    Accounts.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new AccountsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new AccountsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Accounts
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var AccountsInputSet = function() {
    AccountsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve books for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Accounts Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var AccountsResultSet = function(resultStream) {
    AccountsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    An object that this user liked
    */
    this.getLikes = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookLike(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Accounts, choreography.Choreography);
util.inherits(AccountsInputSet, choreography.InputSet);
util.inherits(AccountsResultSet, choreography.ResultSet);
exports.Accounts = Accounts;


/*
    Books
    Retrieves a list of books that a given user has liked.
*/


var Books = function(session) {
    /*
        Create a new instance of the Books Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Books"
    Books.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new BooksResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new BooksInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Books
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var BooksInputSet = function() {
    BooksInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve books for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Books Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var BooksResultSet = function(resultStream) {
    BooksResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    An object that this user liked
    */
    this.getLikes = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookLike(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Books, choreography.Choreography);
util.inherits(BooksInputSet, choreography.InputSet);
util.inherits(BooksResultSet, choreography.ResultSet);
exports.Books = Books;


/*
    Checkins
    Retrieves a list of checkins associated with a specified user.
*/


var Checkins = function(session) {
    /*
        Create a new instance of the Checkins Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Checkins"
    Checkins.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CheckinsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CheckinsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Checkins
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CheckinsInputSet = function() {
    CheckinsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve checkins for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Checkins Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CheckinsResultSet = function(resultStream) {
    CheckinsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get a checkin object
    */
    this.getCheckins = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookCheckin(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Checkins, choreography.Choreography);
util.inherits(CheckinsInputSet, choreography.InputSet);
util.inherits(CheckinsResultSet, choreography.ResultSet);
exports.Checkins = Checkins;


/*
    Comments
    Retrieves comments for a specified Graph API object.
*/


var Comments = function(session) {
    /*
        Create a new instance of the Comments Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Comments"
    Comments.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CommentsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CommentsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Comments
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CommentsInputSet = function() {
    CommentsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Filter input for this Choreo. ((optional, string) Filters comments. Use "toplevel" to return comments on a post, but not replies to comments. Use "stream" to return comments and replies.)
        */
        this.set_Filter = function(value) {
            this.setInput("Filter", value);
        }

        /*
        Set the value of the Limt input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limt = function(value) {
            this.setInput("Limt", value);
        }

        /*
        Set the value of the ObjectID input for this Choreo. ((required, string) The id of a graph api object to get comments for.)
        */
        this.set_ObjectID = function(value) {
            this.setInput("ObjectID", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Comments Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CommentsResultSet = function(resultStream) {
    CommentsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    The comment for this graph object
    */
    this.getComments = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookComment(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Comments, choreography.Choreography);
util.inherits(CommentsInputSet, choreography.InputSet);
util.inherits(CommentsResultSet, choreography.ResultSet);
exports.Comments = Comments;


/*
    Events
    Retrieves a list of events associated with a specified user.
*/


var Events = function(session) {
    /*
        Create a new instance of the Events Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Events"
    Events.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new EventsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new EventsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Events
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var EventsInputSet = function() {
    EventsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve events for. Defaults to "me" indicating authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Events Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var EventsResultSet = function(resultStream) {
    EventsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the user's event
    */
    this.getEvents = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookEvent(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Events, choreography.Choreography);
util.inherits(EventsInputSet, choreography.InputSet);
util.inherits(EventsResultSet, choreography.ResultSet);
exports.Events = Events;


/*
    FriendRequests
    Retrieves a list of friend requests for a specified user.
*/


var FriendRequests = function(session) {
    /*
        Create a new instance of the FriendRequests Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/FriendRequests"
    FriendRequests.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FriendRequestsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FriendRequestsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FriendRequests
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FriendRequestsInputSet = function() {
    FriendRequestsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limt input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limt = function(value) {
            this.setInput("Limt", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve friend requests for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FriendRequests Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FriendRequestsResultSet = function(resultStream) {
    FriendRequestsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get a friend requests for this user
    */
    this.getFriendRequests = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookFriendRequest(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
    /*
    Get the summary for friend requests
    */
    this.getSummary = function()  {
    	return new  FacebookSummary(JSON.parse(this.getResult('Response'))["summary"]);
    }
}

util.inherits(FriendRequests, choreography.Choreography);
util.inherits(FriendRequestsInputSet, choreography.InputSet);
util.inherits(FriendRequestsResultSet, choreography.ResultSet);
exports.FriendRequests = FriendRequests;


/*
    Friends
    Retrieves a list of names and profile IDs for Facebook friends associated with a specified user.
*/


var Friends = function(session) {
    /*
        Create a new instance of the Friends Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Friends"
    Friends.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FriendsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FriendsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Friends
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FriendsInputSet = function() {
    FriendsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final OAuth step.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve a friends list for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Friends Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FriendsResultSet = function(resultStream) {
    FriendsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get a friend object
    */
    this.getFriends = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookFriend(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Friends, choreography.Choreography);
util.inherits(FriendsInputSet, choreography.InputSet);
util.inherits(FriendsResultSet, choreography.ResultSet);
exports.Friends = Friends;


/*
    GetObject
    Retrieves retrieves the details for a Graph API object that you specify.
*/


var GetObject = function(session) {
    /*
        Create a new instance of the GetObject Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/GetObject"
    GetObject.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetObjectResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetObjectInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetObject
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetObjectInputSet = function() {
    GetObjectInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the ObjectID input for this Choreo. ((required, string) The id of a graph api object to retrieve.)
        */
        this.set_ObjectID = function(value) {
            this.setInput("ObjectID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetObject Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetObjectResultSet = function(resultStream) {
    GetObjectResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response from Facebook.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetObject, choreography.Choreography);
util.inherits(GetObjectInputSet, choreography.InputSet);
util.inherits(GetObjectResultSet, choreography.ResultSet);
exports.GetObject = GetObject;


/*
    Groups
    Retrieves a list of groups associated with a specified user.
*/


var Groups = function(session) {
    /*
        Create a new instance of the Groups Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Groups"
    Groups.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GroupsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GroupsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Groups
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GroupsInputSet = function() {
    GroupsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve groups for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Groups Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GroupsResultSet = function(resultStream) {
    GroupsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the group object for this user
    */
    this.getGroups = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookGroup(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Groups, choreography.Choreography);
util.inherits(GroupsInputSet, choreography.InputSet);
util.inherits(GroupsResultSet, choreography.ResultSet);
exports.Groups = Groups;


/*
    Inbox
    Retrieves a list of messages in a specified user's inbox.
*/


var Inbox = function(session) {
    /*
        Create a new instance of the Inbox Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Inbox"
    Inbox.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new InboxResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new InboxInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Inbox
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var InboxInputSet = function() {
    InboxInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve messages for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Inbox Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var InboxResultSet = function(resultStream) {
    InboxResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get an inbox item
    */
    this.getInboxItems = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookInboxItem(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
    /*
    Get the summary for this inbox
    */
    this.getSummary = function()  {
    	return new  FacebookSummary(JSON.parse(this.getResult('Response'))["summary"]);
    }
}

util.inherits(Inbox, choreography.Choreography);
util.inherits(InboxInputSet, choreography.InputSet);
util.inherits(InboxResultSet, choreography.ResultSet);
exports.Inbox = Inbox;


/*
    Likes
    Retrieves the Likes for a specified user.
*/


var Likes = function(session) {
    /*
        Create a new instance of the Likes Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Likes"
    Likes.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new LikesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new LikesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Likes
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var LikesInputSet = function() {
    LikesInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve likes for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Likes Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var LikesResultSet = function(resultStream) {
    LikesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    An object that this user liked
    */
    this.getLikes = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookLike(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Likes, choreography.Choreography);
util.inherits(LikesInputSet, choreography.InputSet);
util.inherits(LikesResultSet, choreography.ResultSet);
exports.Likes = Likes;


/*
    Movies
    Retrieves movies associated with a specified user.
*/


var Movies = function(session) {
    /*
        Create a new instance of the Movies Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Movies"
    Movies.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new MoviesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new MoviesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Movies
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var MoviesInputSet = function() {
    MoviesInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve movies for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Movies Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var MoviesResultSet = function(resultStream) {
    MoviesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    An object that this user liked
    */
    this.getLikes = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookLike(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Movies, choreography.Choreography);
util.inherits(MoviesInputSet, choreography.InputSet);
util.inherits(MoviesResultSet, choreography.ResultSet);
exports.Movies = Movies;


/*
    Music
    Retrieves music associated with a specified user.
*/


var Music = function(session) {
    /*
        Create a new instance of the Music Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Music"
    Music.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new MusicResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new MusicInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Music
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var MusicInputSet = function() {
    MusicInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retireve music for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Music Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var MusicResultSet = function(resultStream) {
    MusicResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    An object that this user liked
    */
    this.getLikes = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookLike(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Music, choreography.Choreography);
util.inherits(MusicInputSet, choreography.InputSet);
util.inherits(MusicResultSet, choreography.ResultSet);
exports.Music = Music;


/*
    NewsFeed
    Retrieves the current news feed associated with a specified user.
*/


var NewsFeed = function(session) {
    /*
        Create a new instance of the NewsFeed Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/NewsFeed"
    NewsFeed.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new NewsFeedResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new NewsFeedInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the NewsFeed
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var NewsFeedInputSet = function() {
    NewsFeedInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve a feed for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the NewsFeed Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var NewsFeedResultSet = function(resultStream) {
    NewsFeedResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get a feed item for this user
    */
    this.getFeedItems = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookFeedItem(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(NewsFeed, choreography.Choreography);
util.inherits(NewsFeedInputSet, choreography.InputSet);
util.inherits(NewsFeedResultSet, choreography.ResultSet);
exports.NewsFeed = NewsFeed;


/*
    Notes
    Retrieves notes associated with a specified user.
*/


var Notes = function(session) {
    /*
        Create a new instance of the Notes Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Notes"
    Notes.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new NotesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new NotesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Notes
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var NotesInputSet = function() {
    NotesInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve notes for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Notes Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var NotesResultSet = function(resultStream) {
    NotesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the user's note
    */
    this.getNotes = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookNote(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Notes, choreography.Choreography);
util.inherits(NotesInputSet, choreography.InputSet);
util.inherits(NotesResultSet, choreography.ResultSet);
exports.Notes = Notes;


/*
    ObjectsWithLocation
    Retrieves a list of objects that have a location associated with them.
*/


var ObjectsWithLocation = function(session) {
    /*
        Create a new instance of the ObjectsWithLocation Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/ObjectsWithLocation"
    ObjectsWithLocation.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ObjectsWithLocationResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ObjectsWithLocationInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ObjectsWithLocation
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ObjectsWithLocationInputSet = function() {
    ObjectsWithLocationInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve results for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ObjectsWithLocation Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ObjectsWithLocationResultSet = function(resultStream) {
    ObjectsWithLocationResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the user's location object
    */
    this.getLocationMetadata = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookLocationMetadata(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(ObjectsWithLocation, choreography.Choreography);
util.inherits(ObjectsWithLocationInputSet, choreography.InputSet);
util.inherits(ObjectsWithLocationResultSet, choreography.ResultSet);
exports.ObjectsWithLocation = ObjectsWithLocation;


/*
    Outbox
    Retrieves a list of messages in a specified user's outbox.
*/


var Outbox = function(session) {
    /*
        Create a new instance of the Outbox Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Outbox"
    Outbox.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new OutboxResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new OutboxInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Outbox
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var OutboxInputSet = function() {
    OutboxInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve outgoing messages for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Outbox Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var OutboxResultSet = function(resultStream) {
    OutboxResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the user's outbox item
    */
    this.getOutboxItems = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookOutboxItem(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Outbox, choreography.Choreography);
util.inherits(OutboxInputSet, choreography.InputSet);
util.inherits(OutboxResultSet, choreography.ResultSet);
exports.Outbox = Outbox;


/*
    Permissions
    Retrieves the set of permissions associated with a given access token.
*/


var Permissions = function(session) {
    /*
        Create a new instance of the Permissions Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Permissions"
    Permissions.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PermissionsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PermissionsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Permissions
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PermissionsInputSet = function() {
    PermissionsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to access. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Permissions Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PermissionsResultSet = function(resultStream) {
    PermissionsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get a specific permission associated with the current access token
    */
    this.getPermissions = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookPermission(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Permissions, choreography.Choreography);
util.inherits(PermissionsInputSet, choreography.InputSet);
util.inherits(PermissionsResultSet, choreography.ResultSet);
exports.Permissions = Permissions;


/*
    PhotoAlbums
    Retrieves a list of photo albums associated with a specified user.
*/


var PhotoAlbums = function(session) {
    /*
        Create a new instance of the PhotoAlbums Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/PhotoAlbums"
    PhotoAlbums.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PhotoAlbumsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PhotoAlbumsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the PhotoAlbums
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PhotoAlbumsInputSet = function() {
    PhotoAlbumsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve photo albums for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the PhotoAlbums Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PhotoAlbumsResultSet = function(resultStream) {
    PhotoAlbumsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get a user's photo album
    */
    this.getPhotoAlbums = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookPhotoAlbum(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(PhotoAlbums, choreography.Choreography);
util.inherits(PhotoAlbumsInputSet, choreography.InputSet);
util.inherits(PhotoAlbumsResultSet, choreography.ResultSet);
exports.PhotoAlbums = PhotoAlbums;


/*
    PhotoTags
    Retrieves a list of photos associated with a specified user.
*/


var PhotoTags = function(session) {
    /*
        Create a new instance of the PhotoTags Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/PhotoTags"
    PhotoTags.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PhotoTagsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PhotoTagsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the PhotoTags
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PhotoTagsInputSet = function() {
    PhotoTagsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve photo tags for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the PhotoTags Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PhotoTagsResultSet = function(resultStream) {
    PhotoTagsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the user's photo
    */
    this.getPhotoTags = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookPhotoTag(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(PhotoTags, choreography.Choreography);
util.inherits(PhotoTagsInputSet, choreography.InputSet);
util.inherits(PhotoTagsResultSet, choreography.ResultSet);
exports.PhotoTags = PhotoTags;


/*
    Picture
    Retrieves the current profile photo for any object in the Facebook graph, and returns the image as a Base64 encoded string.
*/


var Picture = function(session) {
    /*
        Create a new instance of the Picture Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Picture"
    Picture.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PictureResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PictureInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Picture
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PictureInputSet = function() {
    PictureInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((required, string) The id of the profile to retrieve a profile picture for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ReturnSSLResources input for this Choreo. ((optional, boolean) Set to 1 to return the picture over a secure connection. Defaults to 0.)
        */
        this.set_ReturnSSLResources = function(value) {
            this.setInput("ReturnSSLResources", value);
        }

        /*
        Set the value of the Type input for this Choreo. ((optional, string) The size of the image to retrieve. Valid values: square (50x50), small (50 pixels wide, variable height), normal (100 pixels wide, variable height), and large (about 200 pixels wide, variable height))
        */
        this.set_Type = function(value) {
            this.setInput("Type", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Picture Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PictureResultSet = function(resultStream) {
    PictureResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((string) Contains the Base64 encoded value of the image retrieved from Facebook.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(Picture, choreography.Choreography);
util.inherits(PictureInputSet, choreography.InputSet);
util.inherits(PictureResultSet, choreography.ResultSet);
exports.Picture = Picture;


/*
    ProfileFeed
    Retrieves the feed from a specified user's Wall.
*/


var ProfileFeed = function(session) {
    /*
        Create a new instance of the ProfileFeed Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/ProfileFeed"
    ProfileFeed.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ProfileFeedResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ProfileFeedInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ProfileFeed
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ProfileFeedInputSet = function() {
    ProfileFeedInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve a feed for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ProfileFeed Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ProfileFeedResultSet = function(resultStream) {
    ProfileFeedResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get a feed item for this user
    */
    this.getFeedItems = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookFeedItem(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(ProfileFeed, choreography.Choreography);
util.inherits(ProfileFeedInputSet, choreography.InputSet);
util.inherits(ProfileFeedResultSet, choreography.ResultSet);
exports.ProfileFeed = ProfileFeed;


/*
    Statuses
    Retrieves a list of  statuses for a specified user.
*/


var Statuses = function(session) {
    /*
        Create a new instance of the Statuses Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/Statuses"
    Statuses.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new StatusesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new StatusesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Statuses
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var StatusesInputSet = function() {
    StatusesInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final OAuth step.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve a list of statuses for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Statuses Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var StatusesResultSet = function(resultStream) {
    StatusesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get a status object in the user's feed
    */
    this.getStatuses = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookStatus(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(Statuses, choreography.Choreography);
util.inherits(StatusesInputSet, choreography.InputSet);
util.inherits(StatusesResultSet, choreography.ResultSet);
exports.Statuses = Statuses;


/*
    User
    Retrieves information about the specified user.
*/


var User = function(session) {
    /*
        Create a new instance of the User Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/User"
    User.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new UserResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new UserInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the User
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var UserInputSet = function() {
    UserInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the User Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var UserResultSet = function(resultStream) {
    UserResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get the details for the user
    */
    this.getUser = function()  {
    	return new  FacebookUser(JSON.parse(this.getResult('Response')));
    }
}

util.inherits(User, choreography.Choreography);
util.inherits(UserInputSet, choreography.InputSet);
util.inherits(UserResultSet, choreography.ResultSet);
exports.User = User;


/*
    VideoTags
    Retrieves a list of video tags associated with a specified user.
*/


var VideoTags = function(session) {
    /*
        Create a new instance of the VideoTags Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/VideoTags"
    VideoTags.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new VideoTagsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new VideoTagsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the VideoTags
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var VideoTagsInputSet = function() {
    VideoTagsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve video tags for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the VideoTags Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var VideoTagsResultSet = function(resultStream) {
    VideoTagsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get a user's video
    */
    this.getVideoMetadata = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookVideoMetadata(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(VideoTags, choreography.Choreography);
util.inherits(VideoTagsInputSet, choreography.InputSet);
util.inherits(VideoTagsResultSet, choreography.ResultSet);
exports.VideoTags = VideoTags;


/*
    VideoUploads
    Retrieves a list of uploaded videos associated with a specified user.
*/


var VideoUploads = function(session) {
    /*
        Create a new instance of the VideoUploads Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Facebook/Reading/VideoUploads"
    VideoUploads.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new VideoUploadsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new VideoUploadsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the VideoUploads
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var VideoUploadsInputSet = function() {
    VideoUploadsInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token retrieved from the final step of the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Fields input for this Choreo. ((optional, string) A comma separated list of fields to return (i.e. id,name).)
        */
        this.set_Fields = function(value) {
            this.setInput("Fields", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Used to page through results. Limits the number of records returned in the response.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Used to page through results. Returns results starting from the specified number.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the ProfileID input for this Choreo. ((optional, string) The id of the profile to retrieve a list of video uploads for. Defaults to "me" indicating the authenticated user.)
        */
        this.set_ProfileID = function(value) {
            this.setInput("ProfileID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Since input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Since = function(value) {
            this.setInput("Since", value);
        }

        /*
        Set the value of the Until input for this Choreo. ((optional, date) Used for time-based pagination. Values can be a unix timestamp or any date accepted by strtotime.)
        */
        this.set_Until = function(value) {
            this.setInput("Until", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the VideoUploads Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var VideoUploadsResultSet = function(resultStream) {
    VideoUploadsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "HasNext" output from this Choreo execution. ((boolean) A boolean flag indicating that a next page exists.)
        */
        this.get_HasNext = function() {
            return this.getResult("HasNext");
        }
        /*
        Retrieve the value for the "HasPrevious" output from this Choreo execution. ((boolean) A boolean flag indicating that a previous page exists.)
        */
        this.get_HasPrevious = function() {
            return this.getResult("HasPrevious");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Facebook. Corresponds to the ResponseFormat input. Defaults to JSON.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
    /*
    Get a video object for the user
    */
    this.getVideos = function()  {
    	var listEntries = JSON.parse(this.getResult('Response'))["data"];
    	var resultArray = new Array();
    	if(listEntries != null) {
    		for(var i=0; i < listEntries.length; i++) {
    			resultArray[i] = new  FacebookVideo(listEntries[i]);
    		}
    	}
    	return resultArray;
    }
}

util.inherits(VideoUploads, choreography.Choreography);
util.inherits(VideoUploadsInputSet, choreography.InputSet);
util.inherits(VideoUploadsResultSet, choreography.ResultSet);
exports.VideoUploads = VideoUploads;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}



/*
 An object containing the name and link of an action
     
*/

var FacebookAction = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The link to the post
	*/
	this.getLink = function()  {
		return base["link"];
	}

	/*
	The name of the action
	*/
	this.getName = function()  {
		return base["name"];
	}
}


/*
 An object containing the id and name of the application that created the graph object (extends FacebookIdentifier)
*/

var FacebookApplication = function(base) {
 
	FacebookApplication.super_.call(this, base);
	this.getBase = function() {
		return base;
	}
}


/*
 A Checkin object represents a single visit to a location
 
*/

var FacebookCheckin = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The application that created this checkin
	*/
	this.getApplication = function()  {
		return new  FacebookApplication(base["application"]);
	}

	/*
	Get the comments for this checkin
	*/
	this.getComments = function()  {
		var listEntries = getSubArrayByKey(base, "comments")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookComment(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The date and time the checkin was created in ISO-8601 format
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	Get the user that the checkin is from
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	The id of the checkin
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get likes for this checkin
	*/
	this.getLikes = function()  {
		var listEntries = getSubArrayByKey(base, "likes")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookLike(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get the place and location for this checkin
	*/
	this.getPlace = function()  {
		return new  FacebookPlace(base["place"]);
	}
}


/*
 An object representing a comment on a graph object
 
*/

var FacebookComment = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Whether or not the comment can be removed
	*/
	this.getCanRemove = function()  {
		return base["can_remove"];
	}

	/*
	The date and time that the comment was created in ISO-8601 format
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	Get the user that created the comment
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	The id of the comment
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The number of times this comment was liked
	*/
	this.getLikeCount = function()  {
		return base["like_count"];
	}

	/*
	The comment text
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	Whether or not the authenticated user likes this comment
	*/
	this.getUserLikes = function()  {
		return base["user_likes"];
	}
}


/*
 An entry from a user's education history
   
*/

var FacebookEducation = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Get the school for this user
	*/
	this.getSchool = function()  {
		return new  FacebookSchool(base["school"]);
	}

	/*
	The type of school
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	Get the graduation year info for a user's school
	*/
	this.getYear = function()  {
		return new  FacebookYear(base["year"]);
	}
}


/*
 An object representing an event on Facebook
 
*/

var FacebookEvent = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The date and time the event will end
	*/
	this.getEndTime = function()  {
		return base["end_time"];
	}

	/*
	The id of the event
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The location of the event
	*/
	this.getLocation = function()  {
		return base["location"];
	}

	/*
	The name of the event
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The RSVP status for the authenticated user
	*/
	this.getRsvpStatus = function()  {
		return base["rsvp_status"];
	}

	/*
	The date and time that the even will begin
	*/
	this.getStartTime = function()  {
		return base["start_time"];
	}

	/*
	The timezone for the event
	*/
	this.getTimezone = function()  {
		return base["timezone"];
	}
}


/*
 An item in a user's feed
 
*/

var FacebookFeedItem = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Get the action link and name for the feed item
	*/
	this.getActions = function()  {
		var listEntries = base["actions"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookAction(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get the application that created this post
	*/
	this.getApplication = function()  {
		return new  FacebookApplication(base["application"]);
	}

	/*
	The feed item caption
	*/
	this.getCaption = function()  {
		return base["caption"];
	}

	/*
	The comment for this feed item
	*/
	this.getComments = function()  {
		var listEntries = getSubArrayByKey(base, "comments")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookComment(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The date and time the feed item was created in ISO-8601 format
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	Get the user that created this feed item
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	The URL for the icon image
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	The id of the feed item
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The users that liked this feed item
	*/
	this.getLikes = function()  {
		var listEntries = getSubArrayByKey(base, "likes")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookLike(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Link to the page on Facebook
	*/
	this.getLink = function()  {
		return base["link"];
	}

	/*
	The message text for the feed item
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	The Page's name
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The source url for a picture in the feed
	*/
	this.getPicture = function()  {
		return base["picture"];
	}

	/*
	A place associated with this feed item
	*/
	this.getPlace = function()  {
		return new  FacebookPlace(base["place"]);
	}

	/*
	The privacy setting for this feed item
	*/
	this.getPrivacy = function()  {
		return new  FacebookPrivacy(base["privacy"]);
	}

	/*
	The type of status
	*/
	this.getStatusType = function()  {
		return base["status_type"];
	}

	/*
	The text of stories not intentionally generated by users
	*/
	this.getStory = function()  {
		return base["story"];
	}

	/*
	The type of feed item
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	The last updated time for the feed
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}
}


/*
 An object containing format parameters for the video
 
*/

var FacebookFormat = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The html element that may be embedded in an Web page to play the video
	*/
	this.getEmbedHtml = function()  {
		return base["embed_html"];
	}

	/*
	The video filter parameter
	*/
	this.getFilter = function()  {
		return base["filter"];
	}

	/*
	The video height
	*/
	this.getHeight = function()  {
		return base["height"];
	}

	/*
	The URL for the thumbnail picture for the video
	*/
	this.getPicture = function()  {
		return base["picture"];
	}

	/*
	The video width
	*/
	this.getWidth = function()  {
		return base["width"];
	}
}


/*
 An object containing the id and name of a friend of the authenticated user
 (extends FacebookIdentifier)
*/

var FacebookFriend = function(base) {
 
	FacebookFriend.super_.call(this, base);
	this.getBase = function() {
		return base;
	}
}


/*
 An object containing information about the friend request
 
*/

var FacebookFriendRequest = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The date and time of the friend request
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	Get the user that the friend request is from
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	Get the user that the friend request was sent to
	*/
	this.getTo = function()  {
		return new  FacebookTo(base["to"]);
	}

	/*
	Whether or not the friend request has been read
	*/
	this.getUnread = function()  {
		return base["unread"];
	}
}


/*
 An object containing the id and name of the creating user (extends FacebookIdentifier)
*/

var FacebookFrom = function(base) {
 
	FacebookFrom.super_.call(this, base);
	this.getBase = function() {
		return base;
	}
}


/*
 An object containing information for the groups that the authenticated user belongs to
 
*/

var FacebookGroup = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Whether or not the authenticated user is the adminstrator of the group
	*/
	this.getAdministrator = function()  {
		return base["administrator"];
	}

	/*
	The bookmark order for the group
	*/
	this.getBookmarkOrder = function()  {
		return base["bookmark_order"];
	}

	/*
	The group id
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The group name
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	Deprecated (retained for backward compatibility only)
	*/
	this.getVersion = function()  {
		return base["version"];
	}
}


/*
 A generic itentifier for a Facebook object, consisting of a name and ID. 
*/

var FacebookIdentifier = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Object ID
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Object name
	*/
	this.getName = function()  {
		return base["name"];
	}
}


/*
 One of the 4 different stored representations of the photo
     
*/

var FacebookImage = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The height of the photo in pixels
	*/
	this.getHeight = function()  {
		return base["height"];
	}

	/*
	The height of the photo in pixels
	*/
	this.getSource = function()  {
		return base["source"];
	}

	/*
	The width of the photo in pixels
	*/
	this.getWidth = function()  {
		return base["width"];
	}
}


/*
 An inbox object
 
*/

var FacebookInboxItem = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The comment for an inbox message
	*/
	this.getComments = function()  {
		var listEntries = getSubArrayByKey(base, "comments")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookComment(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The id of the inbox item
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get the user that the message has been sent to
	*/
	this.getTo = function()  {
		var listEntries = getSubArrayByKey(base, "to")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookTo(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The number of unread comments for this inbox item
	*/
	this.getUnread = function()  {
		return base["unread"];
	}

	/*
	Whether or not the message has been seen yet
	*/
	this.getUnseen = function()  {
		return base["unseen"];
	}

	/*
	The last updated time for this thread
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}
}


/*
 An object containing the id and name of the user who liked a post
 
*/

var FacebookLike = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The category of the item that was liked. May not be present in the response
	*/
	this.getCategory = function()  {
		return base["category"];
	}

	/*
	The date and time that the object was liked in ISO-8601 format
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	The id of the user who liked an object
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The name of the user who liked an object
	*/
	this.getName = function()  {
		return base["name"];
	}
}


/*
 An object containing location information for the place
   
*/

var FacebookLocation = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The city that the place is located in
	*/
	this.getCity = function()  {
		return base["city"];
	}

	/*
	The country that the place is located in
	*/
	this.getCountry = function()  {
		return base["country"];
	}

	/*
	The latitude coordinate
	*/
	this.getLatitude = function()  {
		return base["latitude"];
	}

	/*
	The longitude coordinate
	*/
	this.getLongitude = function()  {
		return base["longitude"];
	}

	/*
	The state abbreviation for the place
	*/
	this.getState = function()  {
		return base["state"];
	}

	/*
	The street address for the place
	*/
	this.getStreet = function()  {
		return base["street"];
	}

	/*
	The zip code for the place
	*/
	this.getZip = function()  {
		return base["zip"];
	}
}


/*
 An object associated with a location
 
*/

var FacebookLocationMetadata = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Get the application that created this object
	*/
	this.getApplication = function()  {
		return new  FacebookApplication(base["application"]);
	}

	/*
	The creation time of this object
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	Get the user that the object is from
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(getSubArrayByKey(base, "from")["from"]);
	}

	/*
	The id of this object
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get the place and location for this graph object
	*/
	this.getPlace = function()  {
		return new  FacebookPlace(base["place"]);
	}

	/*
	The type of object
	*/
	this.getType = function()  {
		return base["type"];
	}
}


/*
 An object containing information about the authenticated user's note
 
*/

var FacebookNote = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The date and time the note was created
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	Get the user that the note is from
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	The icon for the note
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	The id of the note
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The message
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	The subject of the note
	*/
	this.getSubject = function()  {
		return base["subject"];
	}

	/*
	The last updated time of the note
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}
}


/*
 An object containing information for an outbox message
 
*/

var FacebookOutboxItem = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The comments for this outbox item
	*/
	this.getComments = function()  {
		var listEntries = getSubArrayByKey(base, "comments")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookComment(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get the user that the outbox item has been sent from
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	The id of the message
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The message text
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	Get the user that the message has been sent to
	*/
	this.getTo = function()  {
		var listEntries = getSubArrayByKey(base, "to")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookTo(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Number of unread messages in the thread
	*/
	this.getUnread = function()  {
		return base["unread"];
	}

	/*
	Whether or not the there are unseen messages
	*/
	this.getUnseen = function()  {
		return base["unseen"];
	}

	/*
	Timestamp of when the thread was last updated
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}
}


/*
 A permission (or scope) associated with the access token used in the request
 
*/

var FacebookPermission = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Provides the ability to manage ads and call the Facebook Ads API on behalf of a user
	*/
	this.getAdsManagement = function()  {
		return base["ads_management"];
	}

	/*
	Enables your application to create and modify events on the user's behalf
	*/
	this.getCreateEvent = function()  {
		return base["create_event"];
	}

	/*
	Enables your application to create notes on the user's behalf
	*/
	this.getCreateNote = function()  {
		return base["create_note"];
	}

	/*
	Provides access to the user's primary email address in the email property.
	*/
	this.getEmail = function()  {
		return base["email"];
	}

	/*
	Provides access to the user's friend's about me info
	*/
	this.getFriendsAboutMe = function()  {
		return base["friends_about_me"];
	}

	/*
	Provides access to the user's friend's activities
	*/
	this.getFriendsActivities = function()  {
		return base["friends_activities"];
	}

	/*
	Provides access to the user's friend's birthdays
	*/
	this.getFriendsBirthday = function()  {
		return base["friends_birthday"];
	}

	/*
	Provides access to the user's friend's education history
	*/
	this.getFriendsEducationHistory = function()  {
		return base["friends_education_history"];
	}

	/*
	Provides access to the user's friend's events
	*/
	this.getFriendsEvents = function()  {
		return base["friends_events"];
	}

	/*
	Provides access to the user's friend's game activities
	*/
	this.getFriendsGamesActivity = function()  {
		return base["friends_games_activity"];
	}

	/*
	Provides access to the user's friend's groups
	*/
	this.getFriendsGroups = function()  {
		return base["friends_groups"];
	}

	/*
	Provides access to the user's friend's hometown info
	*/
	this.getFriendsHometown = function()  {
		return base["friends_hometown"];
	}

	/*
	Provides access to the user's friend's interests
	*/
	this.getFriendsInterests = function()  {
		return base["friends_interests"];
	}

	/*
	Provides access to the user's friend's likes
	*/
	this.getFriendsLikes = function()  {
		return base["friends_likes"];
	}

	/*
	Provides access to the user's friend's location info
	*/
	this.getFriendsLocation = function()  {
		return base["friends_location"];
	}

	/*
	Provides access to the user's friend's notes
	*/
	this.getFriendsNotes = function()  {
		return base["friends_notes"];
	}

	/*
	Provides access to the user's friend's online/offline presence
	*/
	this.getFriendsOnlinePresence = function()  {
		return base["friends_online_presence"];
	}

	/*
	Provides access to the user's friend's video tags
	*/
	this.getFriendsPhotoVideoTags = function()  {
		return base["friends_photo_video_tags"];
	}

	/*
	Provides access to the user's friend's photos
	*/
	this.getFriendsPhotos = function()  {
		return base["friends_photos"];
	}

	/*
	Provides access to the user's friend's questions
	*/
	this.getFriendsQuestions = function()  {
		return base["friends_questions"];
	}

	/*
	Provides access to the user's friend's relationship details
	*/
	this.getFriendsRelationshipDetails = function()  {
		return base["friends_relationship_details"];
	}

	/*
	Provides access to the user's friend's relationship
	*/
	this.getFriendsRelationships = function()  {
		return base["friends_relationships"];
	}

	/*
	Provides access to the user's friend's religion and politics affiliations
	*/
	this.getFriendsReligionPolitics = function()  {
		return base["friends_religion_politics"];
	}

	/*
	Provides access to the user's friend's status
	*/
	this.getFriendsStatus = function()  {
		return base["friends_status"];
	}

	/*
	Provides access to the user's friend's subscriptions
	*/
	this.getFriendsSubscriptions = function()  {
		return base["friends_subscriptions"];
	}

	/*
	Provides access to the user's friend's videos
	*/
	this.getFriendsVideos = function()  {
		return base["friends_videos"];
	}

	/*
	Provides access to the user's friend's website
	*/
	this.getFriendsWebsite = function()  {
		return base["friends_website"];
	}

	/*
	Provides access to the user's friend's work history
	*/
	this.getFriendsWorkHistory = function()  {
		return base["friends_work_history"];
	}

	/*
	Enables your app to create and edit the user's friend lists
	*/
	this.getManageFriendlists = function()  {
		return base["manage_friendlists"];
	}

	/*
	Enables your app to read notifications and mark them as read
	*/
	this.getManageNotifications = function()  {
		return base["manage_notifications"];
	}

	/*
	Enables your application to retrieve access_tokens for Pages and Applications that the user administrates
	*/
	this.getManagePages = function()  {
		return base["manage_pages"];
	}

	/*
	Enables your application to upload photos for a user
	*/
	this.getPhotoUpload = function()  {
		return base["photo_upload"];
	}

	/*
	Allows your app to publish to the Open Graph
	*/
	this.getPublishActions = function()  {
		return base["publish_actions"];
	}

	/*
	Enables your app to perform checkins on behalf of the user
	*/
	this.getPublishCheckins = function()  {
		return base["publish_checkins"];
	}

	/*
	Enables your app to post content, comments, and likes to a user's stream and to the streams of the user's friends
	*/
	this.getPublishStream = function()  {
		return base["publish_stream"];
	}

	/*
	Provides access to any friend lists the user created
	*/
	this.getReadFriendlists = function()  {
		return base["read_friendlists"];
	}

	/*
	Provides read access to the Insights data for pages, applications, and domains the user owns
	*/
	this.getReadInsights = function()  {
		return base["read_insights"];
	}

	/*
	Provides the ability to read from a user's Facebook Inbox
	*/
	this.getReadMailbox = function()  {
		return base["read_mailbox"];
	}

	/*
	Provides read access to the user's friend requests
	*/
	this.getReadRequests = function()  {
		return base["read_requests"];
	}

	/*
	Provides access to all the posts in the user's News Feed and enables your application to perform searches against the user's News Feed
	*/
	this.getReadStream = function()  {
		return base["read_stream"];
	}

	/*
	Enables your application to RSVP to events on the user's behalf
	*/
	this.getRsvpEvent = function()  {
		return base["rsvp_event"];
	}

	/*
	Enables your application to update a user's status
	*/
	this.getStatusUpdate = function()  {
		return base["status_update"];
	}

	/*
	Provides access to the "About Me" section of the profile in the about property
	*/
	this.getUserAboutMe = function()  {
		return base["user_about_me"];
	}

	/*
	Allows you to retrieve the actions published by all applications using the built-in music.listens action
	*/
	this.getUserActionsMusic = function()  {
		return base["user_actions.music"];
	}

	/*
	Allows you to retrieve the actions published by all applications using the built-in news.reads action
	*/
	this.getUserActionsNews = function()  {
		return base["user_actions.news"];
	}

	/*
	Allows you to retrieve the actions published by all applications using the built-in video.watches action
	*/
	this.getUserActionsVideo = function()  {
		return base["user_actions.video"];
	}

	/*
	Provides access to the user's list of activities as the activities connection
	*/
	this.getUserActivities = function()  {
		return base["user_activities"];
	}

	/*
	Provides access to the birthday with year as the birthday property
	*/
	this.getUserBirthday = function()  {
		return base["user_birthday"];
	}

	/*
	Provides read access to the authorized user's check-ins or a friend's check-ins that the user can see
	*/
	this.getUserCheckins = function()  {
		return base["user_checkins"];
	}

	/*
	Provides access to education history as the education property
	*/
	this.getUserEducationHistory = function()  {
		return base["user_education_history"];
	}

	/*
	Provides access to the list of events the user is attending as the events connection
	*/
	this.getUserEvents = function()  {
		return base["user_events"];
	}

	/*
	Allows you post and retrieve game achievement activity
	*/
	this.getUserGamesActivity = function()  {
		return base["user_games_activity"];
	}

	/*
	Provides access to the list of groups the user is a member of as the groups connection
	*/
	this.getUserGroups = function()  {
		return base["user_groups"];
	}

	/*
	Provides access to the user's hometown in the hometown property
	*/
	this.getUserHometown = function()  {
		return base["user_hometown"];
	}

	/*
	Provides access to the user's list of interests as the interests connection
	*/
	this.getUserInterests = function()  {
		return base["user_interests"];
	}

	/*
	Provides access to the list of all of the pages the user has liked as the likes connection
	*/
	this.getUserLikes = function()  {
		return base["user_likes"];
	}

	/*
	Provides access to the user's current city as the location property
	*/
	this.getUserLocation = function()  {
		return base["user_location"];
	}

	/*
	Provides access to the user's notes as the notes connection
	*/
	this.getUserNotes = function()  {
		return base["user_notes"];
	}

	/*
	Provides access to the user's online/offline presence
	*/
	this.getUserOnlinePresence = function()  {
		return base["user_online_presence"];
	}

	/*
	Provides access to video tags
	*/
	this.getUserPhotoVideoTags = function()  {
		return base["user_photo_video_tags"];
	}

	/*
	Provides access to the photos the user has uploaded, and photos the user has been tagged in
	*/
	this.getUserPhotos = function()  {
		return base["user_photos"];
	}

	/*
	Provides access to the questions the user or friend has asked
	*/
	this.getUserQuestions = function()  {
		return base["user_questions"];
	}

	/*
	Provides access to the user's relationship preferences
	*/
	this.getUserRelationshipDetails = function()  {
		return base["user_relationship_details"];
	}

	/*
	Provides access to the user's family and personal relationships and relationship status
	*/
	this.getUserRelationships = function()  {
		return base["user_relationships"];
	}

	/*
	Provides access to the user's religious and political affiliations
	*/
	this.getUserReligionPolitics = function()  {
		return base["user_religion_politics"];
	}

	/*
	Provides access to the user's status messages and checkins
	*/
	this.getUserStatus = function()  {
		return base["user_status"];
	}

	/*
	Provides access to the user's subscribers and subscribees
	*/
	this.getUserSubscriptions = function()  {
		return base["user_subscriptions"];
	}

	/*
	Provides access to the videos the user has uploaded, and videos the user has been tagged in
	*/
	this.getUserVideos = function()  {
		return base["user_videos"];
	}

	/*
	Provides access to the user's web site URL
	*/
	this.getUserWebsite = function()  {
		return base["user_website"];
	}

	/*
	Provides access to work history as the work property
	*/
	this.getUserWorkHistory = function()  {
		return base["user_work_history"];
	}

	/*
	Provides access to upload videos
	*/
	this.getVideoUpload = function()  {
		return base["video_upload"];
	}

	/*
	*/
	this.getWhitelistedOfflineAccess = function()  {
		return base["whitelisted_offline_access"];
	}

	/*
	Provides applications that integrate with Facebook Chat the ability to log in users
	*/
	this.getXmppLogin = function()  {
		return base["xmpp_login"];
	}
}


/*
 An object containing information about a user's photo album
 
*/

var FacebookPhotoAlbum = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Determines whether the UID can upload to the album and returns true if it allowed
	*/
	this.getCanUpload = function()  {
		return base["can_upload"];
	}

	/*
	The number of photos in this album
	*/
	this.getCount = function()  {
		return base["count"];
	}

	/*
	The album cover photo ID
	*/
	this.getCoverPhoto = function()  {
		return base["cover_photo"];
	}

	/*
	The time the photo album was initially created
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	Get the user that the photo is from
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	The album ID
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	A link to this album on Facebook
	*/
	this.getLink = function()  {
		return base["link"];
	}

	/*
	The title of the album
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The privacy settings for the album
	*/
	this.getPrivacy = function()  {
		return base["privacy"];
	}

	/*
	The type of the album: profile, mobile, wall, normal or album
	*/
	this.getType = function()  {
		return base["type"];
	}

	/*
	The last time the photo album was updated
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}
}


/*
 A photo objects including tagged users and their positions in this photo
 
*/

var FacebookPhotoTag = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Get comments for this photo object
	*/
	this.getComments = function()  {
		var listEntries = getSubArrayByKey(base, "comments")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookComment(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The time the photo was initially published in ISO-8601 format
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	The profile (user or page) that posted this photo
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	The height of the photo in pixels
	*/
	this.getHeight = function()  {
		return base["height"];
	}

	/*
	The icon that Facebook displays when photos are published to the Feed
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	The id of the photo
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get a representation fo this photo
	*/
	this.getImages = function()  {
		var listEntries = base["images"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookImage(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The users that have liked this photo
	*/
	this.getLikes = function()  {
		var listEntries = getSubArrayByKey(base, "likes")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookLike(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	A link to the photo
	*/
	this.getLink = function()  {
		return base["link"];
	}

	/*
	The user provided caption given to this photo
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The thumbnail-sized source of the photo
	*/
	this.getPicture = function()  {
		return base["picture"];
	}

	/*
	The position of this photo in the album
	*/
	this.getPosition = function()  {
		return base["position"];
	}

	/*
	The source image of the photo
	*/
	this.getSource = function()  {
		return base["source"];
	}

	/*
	Get a tag in this photo
	*/
	this.getTags = function()  {
		var listEntries = getSubArrayByKey(base, "tags")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookTag(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The last time the photo or its caption was updated in ISO-8601 format
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}

	/*
	The width of the photo in pixels
	*/
	this.getWidth = function()  {
		return base["width"];
	}
}


/*
 An object containing information about the Facebook Page that represents the location
 
*/

var FacebookPlace = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The id of the place
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	Get location information for this place
	*/
	this.getLocation = function()  {
		return new  FacebookLocation(base["location"]);
	}

	/*
	The name of the place that was checked into
	*/
	this.getName = function()  {
		return base["name"];
	}
}


/*
 An object containing the privacy settings of the graph object
 
*/

var FacebookPrivacy = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The allow field for the privacy setting
	*/
	this.getAllow = function()  {
		return base["allow"];
	}

	/*
	The deny field for the privacy setting
	*/
	this.getDeny = function()  {
		return base["deny"];
	}

	/*
	The description field for the privacy setting
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	The friends field for the privacy setting
	*/
	this.getFriends = function()  {
		return base["friends"];
	}

	/*
	The networks field for the privacy setting
	*/
	this.getNetworks = function()  {
		return base["networks"];
	}

	/*
	The value field for the privacy setting
	*/
	this.getValue = function()  {
		return base["value"];
	}
}


/*
 An object containing the id and name of the user's school
     (extends FacebookIdentifier)
*/

var FacebookSchool = function(base) {
 
	FacebookSchool.super_.call(this, base);
	this.getBase = function() {
		return base;
	}
}


/*
 An object containing information on the user's significat other
   (extends FacebookIdentifier)
*/

var FacebookSignificantOther = function(base) {
 
	FacebookSignificantOther.super_.call(this, base);
	this.getBase = function() {
		return base;
	}
}


/*
 A status messages on a user's wall
 
*/

var FacebookStatus = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	Get the comments for this status
	*/
	this.getComments = function()  {
		var listEntries = getSubArrayByKey(base, "comments")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookComment(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	Get the user that posted this status
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	The id of the message
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The message text
	*/
	this.getMessage = function()  {
		return base["message"];
	}

	/*
	The time the message was published in ISO-8601 format
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}
}


/*
 An object containing the totalCount, unreadCount, and updatedTime summary fields for the collection of friend requests
 
*/

var FacebookSummary = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The total count of friend requests
	*/
	this.getTotalCount = function()  {
		return base["total_count"];
	}

	/*
	The total number of unread friend requests
	*/
	this.getUnreadCount = function()  {
		return base["unread_count"];
	}

	/*
	The last updated time for the friend request result
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}
}


/*
 An object containing a tagged user and their position in this photo
     
*/

var FacebookTag = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The timestamp when this tag was created in ISO-8601 format
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	The id of person who is tagged
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The name of ther person who is tagged
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The x coordinate which indicates the position in the photo
	*/
	this.getX = function()  {
		return base["x"];
	}

	/*
	The y coordinate which indicates the position in the photo
	*/
	this.getY = function()  {
		return base["y"];
	}
}


/*
 An object containing the id and name of the user who is receiving a message or request (extends FacebookIdentifier)
*/

var FacebookTo = function(base) {
 
	FacebookTo.super_.call(this, base);
	this.getBase = function() {
		return base;
	}
}


/*
 A user object
 
*/

var FacebookUser = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The user's date of birth
	*/
	this.getBirthday = function()  {
		return base["birthday"];
	}

	/*
	Get the user's education information
	*/
	this.getEducation = function()  {
		var listEntries = base["education"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookEducation(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The user's email address
	*/
	this.getEmail = function()  {
		return base["email"];
	}

	/*
	the user's first name
	*/
	this.getFirstName = function()  {
		return base["first_name"];
	}

	/*
	The user's gender
	*/
	this.getGender = function()  {
		return base["gender"];
	}

	/*
	The id of the user
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The last name of the user
	*/
	this.getLastName = function()  {
		return base["last_name"];
	}

	/*
	The link the the user's profile page
	*/
	this.getLink = function()  {
		return base["link"];
	}

	/*
	The user's locale
	*/
	this.getLocale = function()  {
		return base["locale"];
	}

	/*
	Get the location information
	*/
	this.getUserLocation = function()  {
		return new  FacebookUserLocation(base["location"]);
	}

	/*
	The name of the user
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The relationship status of the user
	*/
	this.getRelationshipStatus = function()  {
		return base["relationship_status"];
	}

	/*
	Get the id and name of the user's significant other
	*/
	this.getSignificantOther = function()  {
		return new  FacebookSignificantOther(base["significant_other"]);
	}

	/*
	The user's timezone offset from UTC
	*/
	this.getTimezone = function()  {
		return base["timezone"];
	}

	/*
	The last time the user's profile was updated;
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}

	/*
	The user's Facebook username
	*/
	this.getUsername = function()  {
		return base["username"];
	}

	/*
	The user's account verification status, either true or false
	*/
	this.getVerified = function()  {
		return base["verified"];
	}
}


/*
 An object containing location information associated with the user
   (extends FacebookIdentifier)
*/

var FacebookUserLocation = function(base) {
 
	FacebookUserLocation.super_.call(this, base);
	this.getBase = function() {
		return base;
	}
}


/*
 An object representing a video on Facebook
 
*/

var FacebookVideo = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The time the video was initially published in ISO-8601 format
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	The video description
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	The html element that may be embedded in an Web page to play the video
	*/
	this.getEmbedHtml = function()  {
		return base["embed_html"];
	}

	/*
	Get the formats for this video
	*/
	this.getFormat = function()  {
		var listEntries = base["format"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookFormat(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The profile (user or page) that created the video
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	The icon that Facebook displays when video are published to the Feed
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	The id of the video
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The name of the video
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The URL for the thumbnail picture for the video
	*/
	this.getPicture = function()  {
		return base["picture"];
	}

	/*
	The source URL for the video
	*/
	this.getSource = function()  {
		return base["source"];
	}

	/*
	The last time the video or video caption was updated in ISO-8601 format
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}
}


/*
 An object containing video tags and video metadata 
 
*/

var FacebookVideoMetadata = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The time that the video was created in ISO-8601 format
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	The description of the video
	*/
	this.getDescription = function()  {
		return base["description"];
	}

	/*
	The html element that may be embedded in an Web page to play the video
	*/
	this.getEmbedHtml = function()  {
		return base["embed_html"];
	}

	/*
	Get the formats for this video
	*/
	this.getFormat = function()  {
		var listEntries = base["format"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookFormat(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The profile (user or page) that created the video
	*/
	this.getFrom = function()  {
		return new  FacebookFrom(base["from"]);
	}

	/*
	The icon that Facebook displays when video are published to the Feed
	*/
	this.getIcon = function()  {
		return base["icon"];
	}

	/*
	The id of the video
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The name of the video
	*/
	this.getName = function()  {
		return base["name"];
	}

	/*
	The URL for the thumbnail picture for the video
	*/
	this.getPicture = function()  {
		return base["picture"];
	}

	/*
	The source url for the video
	*/
	this.getSource = function()  {
		return base["source"];
	}

	/*
	Get the tags for this video
	*/
	this.getVideoTags = function()  {
		var listEntries = getSubArrayByKey(base, "tags")["data"];
		var resultArray = new Array();
		if(listEntries != null) {
			for(var i=0; i < listEntries.length; i++) {
				resultArray[i] = new  FacebookVideoTag(listEntries[i]);
			}
		}
		return resultArray;
	}

	/*
	The last time the video or video caption was updated in ISO-8601 format
	*/
	this.getUpdatedTime = function()  {
		return base["updated_time"];
	}
}


/*
 An object containing a person tagged in a video
     
*/

var FacebookVideoTag = function(base) {
	var base = base;
    if(typeof(base) == 'undefined')
        base = new Array();

	this.getBase = function() {
		return base;
	}
	/*
	The time that the tag was created in in ISO-8601 format
	*/
	this.getCreatedTime = function()  {
		return base["created_time"];
	}

	/*
	The id of the tag
	*/
	this.getId = function()  {
		return base["id"];
	}

	/*
	The name of the person tagged
	*/
	this.getName = function()  {
		return base["name"];
	}
}


/*
 An object containing the graduation year for this school
     (extends FacebookIdentifier)
*/

var FacebookYear = function(base) {
 
	FacebookYear.super_.call(this, base);
	this.getBase = function() {
		return base;
	}
}

 
util.inherits(FacebookApplication, FacebookIdentifier);
 
util.inherits(FacebookFriend, FacebookIdentifier);
 
util.inherits(FacebookFrom, FacebookIdentifier);
 
util.inherits(FacebookSchool, FacebookIdentifier);
 
util.inherits(FacebookSignificantOther, FacebookIdentifier);
 
util.inherits(FacebookTo, FacebookIdentifier);
 
util.inherits(FacebookUserLocation, FacebookIdentifier);
 
util.inherits(FacebookYear, FacebookIdentifier);

