{
  "name": "node-twitter-api",
  "version": "1.1.1",
  "description": "Simple module for using Twitter's API in node.js",
  "keywords": [
    "twitter",
    "oauth",
    "rest",
    "streaming"
  ],
  "homepage": "https://github.com/renner96/node-twitter-api",
  "author": {
    "name": "RenÃ© Raab",
    "url": "renner96"
  },
  "licenses": {
    "type": "MIT",
    "url": "https://raw.github.com/renner96/node-twitter-api/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/renner96/node-twitter-api.git"
  },
  "dependencies": {
    "oauth": ">=0.8.4"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "main": "./twitter",
  "readme": "# node-twitter #\r\n\r\n\r\nSimple module for using Twitter's API in node.js\r\n\r\n## Wiki Links ##\r\n[ToDo-List](https://github.com/renner96/node-twitter/wiki/ToDo)\r\n\r\n## Installation ##\r\n\r\n\r\n`npm install node-twitter-api`\r\n\r\n## Usage ##\r\n\r\n### Step 1: Initialization ###\r\n```javascript\r\nvar twitterAPI = require('node-twitter-api');\r\nvar twitter = new twitterAPI({\r\n\tconsumerKey: 'your consumer Key',\r\n\tconsumerSecret: 'your consumer secret',\r\n\tcallback: 'http://yoururl.tld/something'\r\n});\r\n```\r\n### Step 2: Getting a request token ###\r\n```javascript\r\ntwitter.getRequestToken(function(error, requestToken, requestTokenSecret, results){\r\n\tif (error) {\r\n\t\tconsole.log(\"Error getting OAuth request token : \" + error);\r\n\t} else {\r\n\t\t//store token and tokenSecret somewhere, you'll need them later; redirect user\r\n\t}\r\n});\r\n```\r\nIf no error has occured, you now have a `requestToken` and a `requestTokenSecret`. You should store them somewhere (e.g. in a session, if you are using express), because you will need them later to get the current user's access token, which is used for authentification.\r\n\r\n### Step 3: Getting an Access Token ###\r\nRedirect the user to `https://twitter.com/oauth/authenticate?oauth_token=[requestToken]`.\r\nIf he allows your app to access his data, Twitter will redirect him to your callback-URL (defined in Step 1) containing the get-parameters: `oauth_token` and `oauth_verifier`. You can use `oauth_token` (which is the `requestToken` in Step 2) to find the associated `requestTokenSecret`. You will need `requestToken`, `requestTokenSecret` and `oauth_verifier` to get an Access Token.\r\n```javascript\r\ntwitter.getAccessToken(requestToken, requestTokenSecret, oauth_verifier, function(error, accessToken, accessTokenSecret, results) {\r\n\tif (error) {\r\n\t\tconsole.log(error);\r\n\t} else {\r\n\t\t//store accessToken and accessTokenSecret somewhere (associated to the user)\r\n\t\t//Step 4: Verify Credentials belongs here\r\n\t}\r\n});\r\n```\r\nIf no error occured, you now have an `accessToken` and an `accessTokenSecret`. You need them to authenticate later API-calls.\r\n\r\n### Step 4: (Optional) Verify Credentials ###\r\n```javascript\r\ntwitter.verifyCredentials(accessToken, accessTokenSecret, function(error, data, response) {\r\n\tif (error) {\r\n\t\t//something was wrong with either accessToken or accessTokenSecret\r\n\t\t//start over with Step 1\r\n\t} else {\r\n\t\t//accessToken and accessTokenSecret can now be used to make api-calls (not yet implemented)\r\n\t\t//data contains the user-data described in the official Twitter-API-docs\r\n\t\t//you could e.g. display his screen_name\r\n\t\tconsole.log(data[\"screen_name\"]);\r\n\t}\r\n});\r\n```\r\n\r\n## Methods ##\r\n(Allmost) all function names replicate the endpoints of the Twitter API 1.1.\r\nIf you want to post a status e. g. - which is done by posting data to statuses/update - you can just do the following:\r\n```javascript\r\ntwitter.statuses(\"update\", {\r\n\t\tstatus: \"Hello world!\"\r\n\t},\r\n\taccessToken,\r\n\taccessTokenSecret,\r\n\tfunction(error, data, response) {\r\n\t\tif (error) {\r\n\t\t\t// something went wrong\r\n\t\t} else {\r\n\t\t\t// data contains the data sent by twitter\r\n\t\t}\r\n\t}\r\n);\r\n```\r\n\r\nMost of the functions use the scheme:\r\n`twitter.[namespace]([type], [params], [accessToken], [accessTokenSecret], [callback]);`\r\n* _namespace_ is the word before the slash (e.g. \"statuses\", \"search\", \"direct_messages\" etc.)\r\n* _type_ is the word after the slash (e.g. \"create\", \"update\", \"show\" etc.)\r\n* _params_ is an object containing the parameters you want to give to twitter (refer to the Twitter API Documentation for more information)\r\n* _accessToken_ and _accessTokenSecret_ are the token and secret of the authenticated user\r\n* _callback_ is a function with the parameters _error_ (either null or an error object), _data_ (data object) and _response_ (unprocessed response from Twitter)\r\n\r\nFor Timelines you can also use the function _getTimeline_ instead of _statuses_ and use shorter types (\"user\" instead of \"user_timeline\").\r\nFor Streams you must use _getStream_ which has two instead of just one callback: a dataCallback and an endCallback. (c.f. data and end events of node's http response)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/renner96/node-twitter-api/issues"
  },
  "_id": "node-twitter-api@1.1.1",
  "dist": {
    "shasum": "babc8a9371ac9881310f640ad6802bae134235e1"
  },
  "_from": "node-twitter-api@",
  "_resolved": "https://registry.npmjs.org/node-twitter-api/-/node-twitter-api-1.1.1.tgz"
}
